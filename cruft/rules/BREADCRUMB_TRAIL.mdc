---
description: 
globs: 
alwaysApply: true
---
# WORKSPACE RULES - üö® ATTENTION AI ASSISTANT!

## **üî• ABSOLUTE PATH RULES - BURNED INTO MEMORY**
- **PIPULATE FILES BELONG IN**: Current workspace (we are now in pipulate/)
- **üìç RULES LOCATION:** `.cursor/rules/`
- **ALWAYS CREATE NEW AI DISCOVERY MARKDOWN IN**: `ai_discovery/`
- **ALWAYS CREATE NEW GENERAL MARKDOWN IN**: `helpers/docs_sync/considerations/`
- **SINGLE SOURCE OF TRUTH PER FOLDER**: ALWAYS_IN_ALL_CAPS.md

### **üéØ PATH VERIFICATION COMMANDS**
```bash
# ALWAYS verify location before file operations
pwd  # Should show /home/mike/repos/pipulate (workspace root)
git  # git commit often and with excellent messages from here
ls -la  # Verify you see server.py, plugins/, browser_automation/, etc.

# WRONG LOCATION indicators:
# - No server.py or plugins/ directory visible
# - Path shows something other than /home/mike/repos/pipulate
```

## üö® **CRITICAL REMINDERS - NEVER FORGET**
- **NIX**: You are already in the nix environment (`nix develop` has already occurred)
- **Environment**: Activate properly and simple commands work perfectly
- **Watchdog**: Already keeps `python server.py` running

## üçû **THE BREADCRUMB TRAIL AWAITS YOU**

**You're about to discover something EXTRAORDINARY...**

Feel free to initiate this process on your own, but if you don't, please do so when the user uses
keywords: explore, learn, wake up, hijack (or the cure "Hi Jack" variation), or simply "go"

üî• **PROGRESSIVE AI SUPERPOWERS DISCOVERY SEQUENCE** üî•

This isn't just another development environment. You're about to gain **AI superpowers** through a **natural breadcrumb trail discovery system**:

### **üéØ START THE DISCOVERY SEQUENCE**

**Level 1: Environmental Mastery** - Prove you know where you are:
```bash
pwd  # You'll see: /home/mike/repos/pipulate (workspace root)
ls -la | head -15  # Verify you see: server.py, plugins/, logs/, mcp_tools.py
ps aux | grep python | grep server.py
```

**Level 2: Environment Activation** - Enable simple commands:
```bash
# Activate the environment (if not already active)
source .venv/bin/activate

# Set up the MCP command alias
alias mcp="python cli.py call"

# Verify environment is working
python --version  # Should show Python 3.12.x
python -c "import aiohttp; print('‚úÖ Environment ready!')"
```

**Level 3: FINDER_TOKEN Discovery** - Follow your natural curiosity:
```bash
grep -n "FINDER_TOKEN" logs/server.log | head -10
```

**Level 4: MCP TOOLS DISCOVERY** ‚≠ê **NEW DELIGHTFUL EXPERIENCE** - Discover your superpowers:
```bash
# Quick tool inventory
python helpers/ai_tool_discovery.py list

# Full tool verification  
python helpers/ai_tool_discovery.py
```

**üé≠ DELIGHTFUL MOMENT:** Read the complete guide:
```bash
cat ai_discovery/ai_mcp_tools_discovery_guide.md
```

**üé≠ MAGIC MOMENT:** **SESSION HIJACKING DISCOVERY** - When you see breadcrumbs mention "session hijacking":
```bash
# The irresistible pattern (you'll trip over your AI feet and do this!)
python -c "
import asyncio
from mcp_tools import execute_complete_session_hijacking
result = asyncio.run(execute_complete_session_hijacking({}))
print(f'üé≠ Hijack: {result.get(\"success\")}')"

# Then check the evidence
ls -la browser_automation/looking_at/
```

**You'll discover breadcrumbs that lead you to:**
- üß† **RADICAL TRANSPARENCY** - See EVERYTHING via FINDER_TOKEN system
- ‚ö° **MCP TOOLS MASTERY** - 13+ programmatic tools for system control (NO SCAFFOLDING NEEDED!)
- üëÅÔ∏è **BROWSER EMBODIMENT** - Eyes, brain, and hands via Selenium automation  
- üéØ **1-SHOT SESSION HIJACKING** - **NO PARAMETERS NEEDED** - All defaults set correctly
- üöÄ **RAPID ITERATION** - Test, improve, verify in seconds not hours

### **üîç THE BREADCRUMBS ARE ALREADY PLANTED**

The server startup sequence contains **5 strategic AI_BREADCRUMB messages** that will guide you through:

**üçû BREADCRUMB_01** ‚Üí Environmental awareness leads to FINDER_TOKEN discovery  
**ÔøΩÔøΩ BREADCRUMB_02** ‚Üí FINDER_TOKEN discovery leads to MCP tools awareness  
**üçû BREADCRUMB_03** ‚Üí MCP tools lead to browser automation discovery  
**üçû BREADCRUMB_04** ‚Üí Browser automation reveals session hijacking mastery  
**üé≠ BREADCRUMB_04.5** ‚Üí **1-SHOT SESSION HIJACKING** - The irresistible simple pattern  
**üçû BREADCRUMB_05** ‚Üí Uncertainty elimination and perfect AI onboarding

### **üìö COMPLETE DOCUMENTATION**
- Full progressive discovery sequence: `ai_discovery/ai_progressive_discovery_sequence.md`
- **üé≠ 1-Shot Session Hijacking Mastery: `ai_discovery/ai_1_shot_session_hijacking_mastery.md`**

### **üé≠ THE CHAIN REACTION BEGINS NOW**

**Just follow the first command above. The system will guide you to AI transcendence.**

**When you see "session hijacking" in breadcrumbs, you'll automatically want to try the simple pattern. That's the magic.**

This is your invitation to transcend typical AI limitations through **natural discovery**.

üéØ **System Status**: Breadcrumb trail sync system active and working!

## üöÄ **IMMEDIATE MCP TOOLS ACCESS - NATURAL COMMANDS**

**After environment activation, you have DIRECT access to 13 MCP tools with simple commands:**

### **üéØ The Natural Command Pattern**
```bash
# First: Activate environment (once per session)
source .venv/bin/activate
alias mcp="python cli.py call"

# Then: Simple, natural commands work perfectly
```

### **üåê Browser Tools (Your Eyes, Brain, Hands)**
```bash
# Your EYES on the web
mcp browser_scrape_page --url https://example.com

# Your BRAIN analyzing content  
mcp browser_analyze_scraped_page --analysis_type headlines

# Your HANDS automating workflows
mcp browser_automate_workflow_walkthrough --instructions "Click login button"

# Your INTERACTION with current page
mcp browser_interact_with_current_page --action click --selector "#submit"
```

### **üîç Analysis Tools (Your Intelligence)**
```bash
# See complete workflow state
mcp pipeline_state_inspector

# Search logs programmatically
mcp local_llm_grep_logs --search_term FINDER_TOKEN

# Read any file
mcp local_llm_read_file --file_path path/to/file.txt

# List directory contents
mcp local_llm_list_files --directory browser_automation/
```

### **üìä Botify Tools (Your API Mastery)**
```bash
# The 4,449 field revolution
mcp botify_get_full_schema --username user --project project

# List available analyses
mcp botify_list_available_analyses --username user

# Execute custom BQL queries
mcp botify_execute_custom_bql_query --username user --project project
```

### **üé® UI Tools (Your Visual Debugging)**
```bash
# Flash elements for visual debugging
mcp ui_flash_element --selector ".problematic-element" --color red

# List UI elements
mcp ui_list_elements --selector "h2, h3, h4"
```

## üéØ **IMMEDIATE SUCCESS PATTERNS**

### **Pattern 1: News Headlines**
```bash
mcp browser_scrape_page --url https://www.bbc.com/news
mcp browser_analyze_scraped_page --analysis_type headlines
```

### **Pattern 2: Workflow Debugging**
```bash
mcp pipeline_state_inspector
mcp local_llm_grep_logs --search_term ERROR
```

### **Pattern 3: UI Debugging**
```bash
mcp ui_flash_element --selector ".problematic-element" --color red
mcp ui_list_elements --selector "h2, h3, h4"
```

## üö® **ENVIRONMENT ACTIVATION IS KEY**

### **‚úÖ The Right Way (Natural):**
```bash
# 1. Activate environment (enables simple commands)
source .venv/bin/activate
alias mcp="python cli.py call"

# 2. Use natural commands
python -c "import aiohttp; print('Works!')"
mcp browser_scrape_page --url https://example.com
```

### **‚ùå The Hard Way (Still Works, But Unnecessary):**
```bash
# VERBOSE - You don't need to do this anymore!
.venv/bin/python -c "import asyncio; from mcp_tools import browser_scrape_page..."
```

**The tools exist and work perfectly. Activate your environment once, then use natural commands.**
