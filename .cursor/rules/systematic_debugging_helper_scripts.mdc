---
description: 
globs: 
alwaysApply: false
---
# Systematic Debugging for Pipulate Helper Scripts

## Overview

When debugging Pipulate helper scripts, especially [swap_workflow_step.py](mdc:pipulate/helpers/swap_workflow_step.py), use systematic diagnosis with logging rather than repeated symptom-fixing attempts to avoid expensive token-burning loops.

## Critical Debugging Methodology

### 1. Add Debug Logging at Key Extraction Points

**Before attempting fixes, add logging to see exactly what's being processed:**

```python
# Add debug output to see raw extracted content
print(f"DEBUG: Raw extracted Step definition:")
print(f"---START---")
print(repr(extracted_content))
print(f"---END---")
```

### 2. Binary Search Problem Isolation

**Identify the exact phase where the problem occurs:**
- ✅ **Extraction Phase**: What content is being pulled from source files?
- ✅ **Transformation Phase**: How is the content being modified?  
- ✅ **Insertion Phase**: How is content being placed in target files?
- ✅ **Syntax Validation**: Does the final result compile?

### 3. Root Cause Pattern: Source Context Artifacts

**Common Bug Pattern in [swap_workflow_step.py](mdc:pipulate/helpers/swap_workflow_step.py):**

The `extract_step_definition` function can extract Step definitions with source context artifacts:

```python
# ❌ WRONG: Extracted with source list context
"Step(id='step_01', done='text_area', show='Text Area', refill=True, transform=lambda prev_value: prev_value.strip() if prev_value else '')]"

# ✅ CORRECT: Clean extraction without source context  
"Step(id='step_01', done='text_area', show='Text Area', refill=True, transform=lambda prev_value: prev_value.strip() if prev_value else '')"
```

**The Fix Pattern:**
```python
# Clean up source context artifacts in extract_step_definition
result = '\n'.join(step_lines_clean)
result = result.rstrip()
if result.endswith(')]'):
    result = result[:-2] + ')'
elif result.endswith(']'):
    result = result[:-1]
return result
```

## When NOT to Use This Pattern

**Avoid this systematic debugging approach for:**
- Normal workflow development (use [05_workflow_creation_helpers.mdc](mdc:05_workflow_creation_helpers.mdc) instead)
- Template-based creation (use proven 4-tool system)
- Standard UI issues (use established HTMX patterns)

**Use this approach specifically for:**
- Helper script bugs with syntax errors
- Extraction/transformation logic issues
- Complex marker-based operations
- Token-expensive debugging loops

## Success Criteria

✅ **Binary search reduces possibilities with each iteration**
✅ **Debug logging reveals exact content at each phase** 
✅ **Fix addresses root cause, not symptoms**
✅ **Solution prevents similar issues in other extraction contexts**
✅ **Token usage is contained and purposeful**

## Integration with Template System

This debugging approach complements the template-based creation system:
- **95% of workflow creation**: Use [05_workflow_creation_helpers.mdc](mdc:05_workflow_creation_helpers.mdc)
- **5% helper script debugging**: Use this systematic approach
- **0% symptom-fixing loops**: Always diagnose root cause first

The systematic debugging methodology ensures helper scripts remain reliable for the proven template-based workflow creation system.
