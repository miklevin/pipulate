---
description: 
globs: 
alwaysApply: true
---
# NixOS Configuration Access Rules (Updated)

## Source Location
- PRIMARY: /home/mike/repos/pipulate/*
- All edits should target the repo location directly

## Environment Setup
- For interactive use (human): Run `nix develop` or `nix develop .#default` from /home/mike/repos/pipulate
- For AI assistants and debugging: Use `nix develop .#quiet` to avoid verbose output
- Never "Run the Server" to check things. It's on Watchdog. It'll run itself.
- Standard command pattern:
  ```bash
  cd ~/repos/pipulate && pkill -f "python server.py" || true && nix develop .#quiet --command <your_command>
  ```
- For monitoring specific output:
  ```bash
  cd ~/repos/pipulate && pkill -f "python server.py" || true && nix develop .#quiet --command bash -c "python server.py 2>&1 | grep -A 5 -B 5 'search_term'"
  ```
- Work exclusively in ~/repos/pipulate
- Use relative paths from repo root

## Data Libraries and Visualization
- Pandas and data visualization libraries are included in the Nix environment
- Test pandas availability in the environment:
  ```bash
  cd ~/repos/pipulate && nix develop .#quiet --command python -c "import pandas; print(pandas.__version__)"
  ```
- For CSV processing issues, verify pandas installation:
  ```bash
  cd ~/repos/pipulate && nix develop .#quiet --command python -c "import pandas as pd; print(pd.read_csv('path/to/test.csv', nrows=5))"
  ```
- When implementing table widgets, ensure HTML generation is properly escaped for FastHTML:
  ```bash
  cd ~/repos/pipulate && nix develop .#quiet --command python -c "import pandas as pd; from fasthtml.components import HTML; print(repr(HTML(pd.DataFrame({'A': [1,2]}).to_html()).to_xml()))"
  ```
- Always specify `nrows` parameter when reading large CSV files to prevent performance issues

## Process Management
- Always include `pkill -f "command_pattern" || true` before starting long-running processes
- This prevents multiple instances of the same process from running simultaneously
- Use `ps aux | grep python` to check for orphaned processes

## Output Interpretation
- The `.#quiet` shell only displays "Quiet Nix environment activated." before your command output
- This provides maximum visibility for important command output within the AI's limited window

## System Updates
- Save changes in repo location
- Run system rebuilds in external terminal
- Let symlinks handle system-level access

## Nix Environment Detection Guide

### Quick Detection Methods
- Look for environment variables: `IN_NIX_SHELL`, `NIX_BUILD_TOP`, `NIX_STORE`
- Check PATH for `/nix/store` entries
- Look for `.#` format in prompt indicating flake-based environment
- Check for `/nix` directory existence

### Terminal Indicators
- PS1 prompt often shows `[nix-shell]` or `[dev]` prefix
- Command `echo $IN_NIX_SHELL` returns `1` in nix-shell
- Running `type nix` shows it's available

### Usage Context
- Python environment paths in `/nix/store/` rather than system paths
- Package availability differs from base system

### Best Practice
- When requesting system changes, first check if in proper Nix environment
- Always prefer running tools via `nix develop .#quiet --command` when performing debugging or analysis
- Use relative paths within the repository structure

## Troubleshooting
- If a command fails, try running with full output:
  ```bash
  cd ~/repos/pipulate && nix develop .#quiet --command <command> 2>&1 | head -50
  ```
- For Python package issues:
  ```bash
  cd ~/repos/pipulate && nix develop .#quiet --command python -c "import importlib.util; print('Module exists:' if importlib.util.find_spec('module_name') else 'Module missing:')"
  ```
- To check server startup specifically:
  ```bash
  cd ~/repos/pipulate && pkill -f "python server.py" || true && nix develop .#quiet --command python server.py 2>&1 | head -30
  ```
