---
description: 
globs: 
alwaysApply: false
---

## description: Conventions and best practices for developing Pipulate plugins (Workflows and CRUD Apps). globs: ["pipulate/plugins/*.py", "README.md"] alwaysApply: true

## description: Conventions and best practices for developing Pipulate plugins (Workflows and CRUD Apps). globs: ["pipulate/plugins/*.py", "README.md"] alwaysApply: true

# Plugin Development Guidelines

## 1. File Naming and Location

  * **Directory**: All plugins (Workflows and CRUD Apps) reside in the `plugins/` directory.
  * **Naming Convention**: `[NNN_]plugin_name.py`
      * `NNN_`: An optional numeric prefix (e.g., `010_`, `120_`). This prefix determines the order in which plugins appear in the UI menus. Lower numbers appear first.
      * `plugin_name.py`: A descriptive name for the plugin, using snake_case.
  * **Internal `APP_NAME`**: Each workflow class defines an `APP_NAME` constant. This is its internal ID for routing and database storage. See `03_workflow_core.mdc`. It's often the `plugin_name` part of the filename but can differ.
  * **`DISPLAY_NAME`**: Each plugin class defines a `DISPLAY_NAME` constant for the UI.

## 2. Auto-Registration and Skipping Files

`server.py` automatically discovers and attempts to register `.py` files in the `plugins/` directory.

  * **Skipped Files**:
      * Files starting with `__` (e.g., `__init__.py`).
      * Files starting with `xx_` or `XX_` (case-insensitive). Use this for experimental or work-in-progress plugins that shouldn't appear in the UI yet.
      * Files containing parentheses `(` or `)` in their name (e.g., `my_workflow (Copy).py`). Useful for temporary backups during development.

## 3. Typical Development Workflow for a New Plugin

1.  **Copy Template**: Start by copying an existing simple plugin, e.g., `plugins/020_hello_workflow.py` (for a new workflow) or `plugins/010_tasks.py` (for a new CRUD app).
2.  **Initial Rename (Development)**: Rename the copied file to include parentheses or the `xx_` prefix.
      * Example: `my_new_workflow (Copy).py` or `xx_my_new_workflow.py`.
      * This prevents it from auto-registering while you work on the initial structure.
3.  **Implement Core Logic**:
      * Define `APP_NAME` (stable internal ID) and `DISPLAY_NAME`.
      * For workflows: define `steps`, `__init__`, `landing`, `init`, step handlers (`step_XX`, `step_XX_submit`), `finalize_workflow_step`, etc.
      * For CRUD apps: define schema, `render_item`, `prepare_insert_data`, `prepare_update_data`.
4.  **Test Iteratively**:
      * Once basic structure is in place and you want to test UI registration, rename to remove parentheses or change `xx_` to a high numeric prefix (e.g., `999_my_new_workflow.py`). Pipulate's watchdog should auto-reload the server.
      * Test functionality thoroughly.
5.  **Finalize Naming and Position**: Rename to the desired numeric prefix and final name (e.g., `075_my_new_workflow.py`) to set its position in the menu.

## 4. Git History and Renaming

  * When renaming files that are already tracked by Git (e.g., promoting `xx_my_flow.py` to `030_my_flow.py`), use `git mv` to preserve file history:
    ```bash
    git mv plugins/xx_my_flow.py plugins/030_my_flow.py
    git commit -m "Feat: Promote workflow xx_my_flow.py to 030_my_flow.py"
    ```
  * For more complex refactoring where `git mv` isn't straightforward, document the changes in commit messages.

## 5. Logging

  * Use the `logger` instance available in `server.py` (which is Loguru).
  * Workflows can access it via `self.pipulate.logger` (if passed) or by importing `from server import logger`.
  * Use contextual logging: `logger.bind(plugin=self.APP_NAME).info("My message")`.
  * Prefer `DEBUG` level for verbose development logs and `INFO` for important operational messages.

## 6. Idempotency and State

  * Workflows should strive to be idempotent where possible: running a step multiple times with the same input should yield the same state (though side effects like file creation might differ or need handling).
  * State is persisted. Ensure that resuming a workflow correctly reflects its previous state.

## 7. Request Handling

  * **Required Parameter**: All methods that handle HTTP requests must accept a `request` parameter:
    ```python
    def landing(self, request):  # Required
        # Landing page logic
        pass

    def step_01_submit(self, request):  # Required
        form_data = request.form
        # Process form data
        pass
    ```
  * **Accessing Request Data**:
    * Form data: `request.form.get('field_name')`
    * Query parameters: `request.query_params.get('param_name')`
    * Headers: `request.headers.get('header_name')`
  * **Error Handling**: Always handle missing or invalid request data gracefully:
    ```python
    def step_01_submit(self, request):
        try:
            user_input = request.form.get('user_input')
            if not user_input:
                return self.pipulate.error_message("Input is required")
            # Process valid input...
        except Exception as e:
            return self.pipulate.error_message(f"Error processing input: {str(e)}")
    ```
  * **Consistency**: Ensure all request-handling methods follow this pattern:
    * `landing` (GET)
    * `init` (POST)
    * Step handlers (GET)
    * Step submission handlers (POST)
    * `finalize_workflow_step` (GET/POST)
    * `unfinalize_workflow_step` (POST)
    * `handle_revert` (POST)

## 8. Documentation System Plugin Pattern

For plugins that serve static content (like documentation), follow the pattern established in [598_documentation.py](mdc:plugins/598_documentation.py):

* **Route Registration**: Register custom routes in `__init__` method:
  ```python
  def __init__(self, app, pipulate, pipeline, db):
      # Register routes for serving content
      for doc_key in self.DOCS.keys():
          app.route(f'/docs/{doc_key}', methods=['GET'])(self.serve_document)
  ```

* **HTML Response**: Return proper HTML strings, not FastHTML components:
  ```python
  async def serve_document(self, request):
      # Process content...
      page_html = f"""<!DOCTYPE html>
      <html>
      <head><title>{title}</title></head>
      <body>{content}</body>
      </html>"""
      return HTMLResponse(page_html)
  ```

* **Navigation**: Use same-tab navigation within served content (no `target="_blank"` for internal links)
* **Integration**: Initial access from workflows should use `target="_blank"` to open in new tab
