---
description: 
globs: 
alwaysApply: false
---
# FastHTML & MiniDataAPI Guide

## Fast App Setup

The `fast_app` function is the core of both FastHTML and MiniDataAPI. It initializes both the web framework and database connections.

```python
# Main app initialization
app, rt, (store, Store), (tasks, Task), (profiles, Profile) = fast_app(
    "data/data.db",  # Database path
    # Schema definitions:
    store={'key': str, 'value': str, 'pk': 'key'},
    task={'id': int, 'name': str, 'done': bool, 'pk': 'id'},
    profile={'id': int, 'name': str, 'pk': 'id'}
)
```

### Unpacking Explained

`fast_app` returns a tuple that we unpack into:
1. `app`: The ASGI application instance
2. `rt`: The route decorator function
3. For each schema definition, a tuple of:
   - Table object for database operations (e.g., `tasks`)
   - Dataclass representing a row (e.g., `Task`)

## FastHTML Components

FastHTML generates HTML directly from Python function calls:

```python
# HTML Generation
return HTML(
    Body(
        Main(
            H1("My Dashboard"),
            Div(
                Card(
                    H2("User Profile"),
                    P(f"Welcome, {user.name}!"),
                    Button("Edit", hx_get="/edit-profile")
                ),
                cls="dashboard-container"
            )
        )
    )
)
```

### HTMX Attributes

HTMX attributes are prefixed with `hx_` and enable dynamic behavior:

```python
Input(
    name="username", 
    placeholder="Enter username",
    hx_post="/check-username",
    hx_target="#username-error",
    hx_trigger="keyup changed delay:500ms"
)
```

Common attributes:
- `hx_get`/`hx_post`: URL to request
- `hx_target`: CSS selector for where to place the response
- `hx_swap`: How to swap content (innerHTML, outerHTML, etc.)
- `hx_trigger`: When to trigger the request

## MiniDataAPI Operations

### Basic CRUD

```python
# Create
new_id = tasks.insert(name="New Task", done=False)

# Read
all_tasks = tasks()  # Fetch all
one_task = tasks(5)  # Fetch by primary key

# Update
tasks.update(5, name="Updated Task", done=True)

# Delete
tasks.delete(5)
```

### Filtering with xtra

```python
# Filter with SQL WHERE clause
done_tasks = tasks.xtra("WHERE done = ?", True)

# More complex filters
priority_tasks = tasks.xtra("WHERE priority > ? AND due_date < ?", 
                           3, "2023-12-31")

# Ordering
sorted_tasks = tasks.xtra("ORDER BY due_date ASC")

# Limit
recent_tasks = tasks.xtra("ORDER BY created_at DESC LIMIT ?", 5)
```

## Combining FastHTML and MiniDataAPI

A typical route combining both:

```python
@rt('/tasks')
def get_tasks():
    return HTML(
        Body(
            Main(
                H1("Task List"),
                Form(
                    Input(name="task_name", placeholder="New task"),
                    Button("Add", type="submit"),
                    hx_post="/add-task",
                    hx_target="#task-list",
                    hx_swap="beforeend"
                ),
                Ul(
                    id="task-list",
                    *[Li(
                        task.name,
                        Span("✓" if task.done else "○",
                             hx_post=f"/toggle-task/{task.id}",
                             hx_target="closest li",
                             hx_swap="outerHTML"
                        )
                      ) for task in tasks()]
                )
            )
        )
    )

@rt('/add-task', methods=['POST'])
async def add_task(request):
    form = await request.form()
    task_name = form.get("task_name", "")
    if task_name:
        task_id = tasks.insert(name=task_name, done=False)
        new_task = tasks(task_id)
        return Li(
            new_task.name,
            Span("○",
                 hx_post=f"/toggle-task/{new_task.id}",
                 hx_target="closest li",
                 hx_swap="outerHTML"
            )
        )
    return ""
```

## Additional Tips

1. **Type Safety**: MiniDataAPI generates typed dataclasses for each table
2. **No Raw SQL**: Avoid raw SQL except in simple `xtra()` filters
3. **Composable HTML**: Break complex UI into smaller functions for reuse
4. **Server-Side Only**: All state lives server-side in the database
5. **Validation**: Always validate form data before inserting into database
