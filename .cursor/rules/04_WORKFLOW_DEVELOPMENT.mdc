---
description: 
globs: 
alwaysApply: false
---
# Workflow Development Guide

This guide is a practical cheatsheet for building WET (Write Everything Twice) workflows in Pipulate. For immutable, core-functional patterns, see [01_CRITICAL_PATTERNS.mdc](mdc:01_CRITICAL_PATTERNS.mdc).

---

## 1. Workflow Structure

A workflow is a Python class in a file within the `plugins/` directory.

- **File Naming**: `[NNN_]plugin_name.py`. The `NNN_` prefix determines menu order. Files starting with `xx_` or containing `()` are ignored.
- **Class Definition**:
  ```python
  from collections import namedtuple
  Step = namedtuple('Step', ['id', 'done', 'show', 'refill', 'transform'], defaults=(None,))

  class MyWorkflow:
      # CRITICAL: Stable internal ID. See 01_CRITICAL_PATTERNS.mdc.
      APP_NAME = "my_workflow_internal"
      # Name for the UI menu.
      DISPLAY_NAME = "My Awesome Workflow" 
      # Defines roles that can see this plugin.
      ROLES = ['Core', 'Developer'] 
      
      def __init__(self, app, pipulate, **kwargs):
          self.app = app
          self.pipulate = pipulate
          # ... other initializations ...
          self.steps = [
              Step(id='step_01', done='input_data', show='Step 1: User Input'),
              # --- STEPS_LIST_INSERTION_POINT ---
              Step(id='finalize', done='finalized', show='Finalize')
          ]
          pipulate.register_workflow_routes(self)

      # --- STEP_METHODS_INSERTION_POINT ---
  ```
- **Request Parameter**: All route-handling methods (`landing`, `init`, `step_XX`, etc.) must accept a `request` parameter.

---

## 2. The 4-Tool Helper System (Recommended Workflow)

This is the primary method for creating and modifying workflows.

1. **`create_workflow.py`**: **Starts everything.** Creates a new workflow file from a template (`blank`, `hello`, `quadfecta`).
2. **`manage_class_attributes.py`**: **Shares styles.** Merges class attributes (like `UI_CONSTANTS`) from a source workflow into a target.
3. **`splice_workflow_step.py`**: **Adds steps.** The only safe way to add a new placeholder step to a workflow. It uses `---...---` markers in the target file.
4. **`swap_workflow_step.py`**: **Adds logic.** Replaces a placeholder step's methods with functional logic from another workflow file.

The **"Sausage Factory" pattern** is the proven sequence for using these tools to build a complex workflow from a `blank` template. See `plugins/200_workflow_genesis.py` for a full demonstration.

---

## 3. UX & Messaging Conventions

- **Progressive Feedback**: Use `self.message_queue.add(...)` to send status updates to the user during long operations. This keeps the UI feeling responsive.
- **Emoji Usage**: Use emojis as visual anchors for status and actions.
  - **Status**: üîç (Working), üéØ (Success), ‚ö†Ô∏è (Warning), ‚ùå (Error), ‚úÖ (Done)
  - **Actions**: üìÇ (Files), ‚¨áÔ∏è (Download), üêç (Code)
- **Deterministic File Paths**: All downloaded files **must** be namespaced under `downloads/{self.APP_NAME}/` to prevent collisions.
- **Cache-Aware Buttons**: Use the dynamic button pattern to change a button's text based on whether a file already exists (e.g., "Generate" vs. "Use Cached").
