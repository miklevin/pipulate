---
description: 
globs: 
alwaysApply: false
---
## description: Core concepts for Pipulate workflow development, including plugin structure, APP_NAME vs. filename, and **init** method. globs: ["pipulate/plugins/*.py", "server.py"] alwaysApply: true

# Pipulate Workflow Core Concepts

## 1. Overview

Pipulate workflows are the fundamental building blocks of the framework. They provide a structured way to create interactive, step-by-step processes that can be easily shared and reused.

## 2. CRITICAL: The Auto-Key Generation Pattern

**THE MOST IMPORTANT PATTERN THAT LLMs CONSISTENTLY MISS:**

When a user hits Enter on an empty key field, this specific sequence occurs:

1. **Form Submission**: POSTs to `/{APP_NAME}/init` with empty `pipeline_id`
2. **Server Response**: The `init` method MUST return an `HX-Refresh` response:
   ```python
   if not user_input:
       from starlette.responses import Response
       response = Response('')
       response.headers['HX-Refresh'] = 'true'
       return response
   ```
3. **Page Reload**: HTMX triggers a full page reload
4. **Auto-Key Population**: The `landing()` method calls `pip.generate_pipeline_key(self)` to populate the input field
5. **User Interaction**: User hits Enter again to start the workflow

**Critical Implementation Details:**
- The `_onfocus='this.setSelectionRange(this.value.length, this.value.length)'` attribute positions cursor at end
- This allows users to easily modify the suggested key
- The pattern ensures predictable, sequential key generation

## 3. Workflow Structure

A workflow consists of:
- A series of steps defined as namedtuples
- State management via DictLikeDB (JSON storage)
- UI components using FastHTML
- Chain reaction progression via HTMX
- Revert functionality for going back to previous steps

## 4. Step Definition Pattern

Steps are defined using namedtuples with specific attributes:

```python
from collections import namedtuple
Step = namedtuple('Step', ['id', 'done', 'show', 'refill', 'transform'], defaults=(None,))

steps = [
    Step(
        id="step_01",           # Unique identifier for routing
        done="✓ Step 1",        # Display text when completed  
        show="Step 1: Input",   # Display text when active
        refill=None,           # Optional: function to populate form data
        transform=None         # Optional: function to transform data
    ),
    # ... more steps
]
```

**Critical Attributes:**
- `id`: Used for routing (`/{APP_NAME}/{step_id}`) and state storage
- `done`: Text shown in revert headers when step is completed
- `show`: Text shown when step is active or being reverted to
- `refill`: Function to pre-populate form fields when reverting
- `transform`: Function to process/validate step data

## 5. The Chain Reaction Pattern

Pipulate uses HTMX-driven step progression:

1. **Initial Trigger**: After `init`, first step loads with `hx_trigger="load"`:
   ```python
   return Div(Div(id=first_step_id, hx_get=f'/{app_name}/{first_step_id}', hx_trigger='load'), 
             id=f'{app_name}-container')
   ```

2. **Step Handlers**: Each step has GET (display) and POST (submit) handlers
3. **Automatic Progression**: Completed steps trigger next step with `hx_trigger="load"`
4. **State Persistence**: Each step stores data in pipeline state

## 6. State Management

1. **DictLikeDB Storage**: State stored as JSON blobs in pipeline table
2. **Step Data Access**:
   ```python
   pip.set_step_data(pipeline_id, step_id, step_value, steps)
   step_data = pip.get_step_data(pipeline_id, step_id, default={})
   ```
3. **Finalization**: Workflows can be locked via `pip.finalize_workflow(pipeline_id)`
4. **Observability**: All state changes are transparent JSON

## 7. Revert Functionality

The revert system allows users to go back to previous steps:

### 7.1 Revert UI Components

1. **Standard Revert Header**:
   ```python
   header = pip.display_revert_header(
       step_id=step_id,
       app_name=app_name,
       message=f'{step.show}: {value}',
       steps=steps
   )
   ```

2. **Widget Revert Display**:
   ```python
   widget_display = pip.display_revert_widget(
       step_id=step_id,
       app_name=app_name,
       message='Widget Title',
       widget=my_widget,
       steps=steps
   )
   ```

3. **Combined Chain Reverter**:
   ```python
   return pip.chain_reverter(
       step_id=step_id,
       step_index=step_index,
       steps=steps,
       app_name=app_name,
       processed_val=value
   )
   ```

### 7.2 Revert Behavior

1. **Revert Button Click**: Triggers POST to `/{app_name}/revert/{step_id}`
2. **State Clearing**: Clears the step's state and all subsequent steps
3. **Chain Restart**: Returns input form and restarts chain reaction

## 8. Plugin System & Types

Pipulate features automatic plugin discovery:

* **CRUD Apps (`BaseCrud`)**: For standard data management. Inherit from `BaseCrud`. Follow DRY principles.
* **Workflows (Plain Classes)**: For linear, step-by-step processes. Follow WET (explicit) principles.

## 9. CRITICAL: APP_NAME vs. Filename Distinction

**This distinction is crucial for data integrity:**

* **Filename** (e.g., `510_workflow_genesis.py`):
  - Determines **public URL endpoint** (`/workflow_genesis`)
  - Numeric prefix controls **menu ordering**
  - Can be changed for UI/organizational purposes

* **APP_NAME Constant** (e.g., `APP_NAME = "workflow_genesis_internal"`):
  - **Internal identifier** for the workflow type
  - Used for **step routing** (`/{APP_NAME}/step_01`)
  - Used as `app_name` in **pipeline database table**
  - **MUST REMAIN STABLE** once workflows have stored data

**Critical Rule**: Never change `APP_NAME` after workflows have been created, or existing workflow data will be orphaned.

## 10. Workflow Class Structure

A typical workflow class:

```python
from collections import namedtuple
# ... other imports ...

Step = namedtuple('Step', ['id', 'done', 'show', 'refill', 'transform'], defaults=(None,))

class MyWorkflow:
    APP_NAME = "my_workflow_internal_id"  # Stable internal ID
    DISPLAY_NAME = "My Workflow"          # User-facing name
    ENDPOINT_MESSAGE = "Welcome message"   # Landing page description
    
    def __init__(self, app, pipulate, pipeline, db, app_name=APP_NAME):
        # Standard initialization pattern
        self.app = app
        self.pipulate = pipulate
        self.pipeline = pipeline
        self.db = db
        self.app_name = app_name
        self.message_queue = pipulate.get_message_queue()
        
        # Define steps
        self.steps = [
            Step(id="step_01", done="✓ Step 1", show="Step 1: Input"),
            Step(id="finalize", done="✓ Complete", show="Finalize")
        ]
        
        # Register routes
        self.register_routes(app.route)
```

## 11. Three-Phase Step Pattern

Every step handler must implement these phases in exact order:

1. **Finalize Phase** (locked view) - includes `hx_trigger='load'`
2. **Revert Phase** (completed view) - includes `hx_trigger='load'` 
3. **Input Phase** (active form) - no `hx_trigger`

```python
async def step_01(self, request):
    # Phase 1: Finalize (locked)
    if pip.is_finalized(pipeline_id):
        return pip.display_revert_header(step_id, app_name, steps, message)
    
    # Phase 2: Revert (completed)  
    if step_data := pip.get_step_data(pipeline_id, step_id):
        return pip.display_revert_header(step_id, app_name, steps, message)
    
    # Phase 3: Input (active)
    return Form(...)  # No hx_trigger
```

## 12. Best Practices

1. **Auto-Key Generation**: Always implement the HX-Refresh pattern for empty keys
2. **Step Design**: Keep steps focused and atomic
3. **State Management**: Use the provided helper methods for consistency
4. **Three-Phase Pattern**: Always implement finalize → revert → input phases
5. **Parameter Order**: Use correct order for helper methods like `display_revert_header(step_id, app_name, steps, message)`
4. **Error Handling**: Validate inputs and handle exceptions gracefully
5. **UI/UX**: Use standardized revert components for consistency
6. **Data Integrity**: Never change APP_NAME after deployment