---
description: 
globs: 
alwaysApply: false
---
# Project Management & Documentation

This guide covers the conventions for documentation, changelogs, and development processes in the Pipulate project.

---

## 1. Incremental Development & Story Arc



Every improvement should follow a narrative "story arc":

1. **Problem Identification**: State a clear user pain point.
2. **Root Cause Analysis**: Perform a technical investigation.
3. **Solution Design**: Outline the implementation strategy.
4. **Iterative Implementation**: Make clean, self-contained changes.
5. **Validation & Documentation**: Verify the fix and capture the knowledge.

---

## 2. Changelog & Git Commit Strategy



### Changelog

- The changelog is located at `training/change_log.md`.
- It follows the [Keep a Changelog](mdc:https:/keepachangelog.com/en/1.0.0) format.
- **Required Entry Components**: Each entry must detail the `PROBLEM RESOLVED`, `ROOT CAUSE ANALYSIS`, `TECHNICAL FIXES`, `VALIDATION PERFORMED`, `IMPACT`, and include the git `Commit` hash.

### Git Commits

- **Structure**: A brief title (<50 chars), followed by bullet points detailing what, how, and why, and including verification steps.
- **Example Title**: `Fix: Correctly handle priority=0 in role sorting`

---

## 3. Documentation System

Pipulate includes a built-in documentation browser.

- **Core Plugin**: `plugins/050_documentation.py` handles document discovery from the `/training` folder, categorization, and navigation.
- **Automatic Pagination**: Long documents (based on file size or multiple `##` headers) are automatically paginated with a table of contents. The generic RegEx patterns for this are critical and should not be modified lightly.
- **Syntax Highlighting**: PrismJS is integrated to automatically highlight code blocks.

---

## 4. Internal Linking Patterns



To ensure the LLM's context is updated correctly when a user navigates, a specific linking pattern is required for cross-plugin navigation.

- **The Redirect Endpoint**: `server.py` has a `/redirect/{path}` endpoint that must be used for navigating *between* different plugins.
- **How it Works**: The redirect handler calls `build_endpoint_messages()` and `build_endpoint_training()` to inject the context for the destination page into the LLM conversation history *before* redirecting the user.
- **✅ Use `/redirect/` for**:
  - Navigating from one plugin to another (e.g., from Roles to Documentation).
  - All main navigation menu links.
- **❌ Use direct links (`/docs`, `/my_workflow`) for**:
  - Navigation *within* the same plugin (e.g., between pages of a paginated document).
  - Links to static assets.

**Example of Correct Cross-Plugin Linking:**
```python
# In a plugin, linking to the documentation plugin
A("View Docs", href="/redirect/documentation")
```
