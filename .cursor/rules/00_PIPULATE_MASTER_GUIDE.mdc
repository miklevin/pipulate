# üöÄ PIPULATE ESSENTIAL PATTERNS

## üö® **CRITICAL PYTHON PATH ISSUE**

**PROBLEM**: You will see `(.venv)` in your terminal prompt, but `python` commands will fail with `ModuleNotFoundError`.

**SOLUTION**: **ALWAYS** use `.venv/bin/python` instead of `python`.

```bash
# ‚ùå WRONG - Will fail
python -c "import aiohttp; print('test')"

# ‚úÖ CORRECT - Will work
.venv/bin/python -c "import aiohttp; print('test')"
```

## üìÅ **AI DISCOVERY DOCUMENT LOCATION**

**AI DISCOVERY DOCUMENTS BELONG IN**: `ai_discovery/`

**NAMING CONVENTION**: `ai_*_*.md` (e.g., `ai_python_path_issue_analysis.md`)

**RULE**: If it's about AI discovery, superpowers, or embodiment, it goes in `ai_discovery/`.

## üõ†Ô∏è **ESSENTIAL MCP TOOLS**

### **Core Tools**
- **`pipeline_state_inspector`** - System state overview
- **`local_llm_grep_logs`** - Log search and analysis
- **`browser_scrape_page`** - Web scraping with AI eyes
- **`browser_analyze_scraped_page`** - Page analysis
- **`browser_automate_workflow_walkthrough`** - Automation workflows
- **`ui_flash_element`** - Visual debugging

### **Usage Pattern**
```bash
.venv/bin/python cli.py call <tool_name> --args
```

## üéØ **CRITICAL DEVELOPMENT PATTERNS**

### **Server Management**
- **NEVER restart server manually** - Watchdog handles it automatically
- **Port**: Always `http://localhost:5001`
- **Environment**: Nix flake controls everything

### **HTMX Patterns**
- **Chain reaction**: `hx_trigger="load"` drives workflow progression
- **Button updates**: Use `hx_swap='outerHTML'` not `innerHTML`
- **Dynamic content**: Each step triggers next via load event

### **Log Analysis**
```bash
# Find specific events
grep "FINDER_TOKEN" logs/server.log

# Recent activity
grep "FINDER_TOKEN" logs/server.log | tail -20
```

### **Browser Automation**
- **Current state**: `browser_automation/looking_at/`
- **History**: `browser_automation/looking_at-1/`, `looking_at-2/`, etc.
- **Screenshots**: Automatically captured during automation

## üîß **RAPID ITERATION LOOP**

1. **DISCOVER** - Browser automation reveals issues
2. **IMPROVE** - Apply targeted fixes
3. **VERIFY** - Re-analyze shows improvements
4. **USE** - Test the improved component
5. **REPEAT** - Move to next component

## üöÄ **IMMEDIATE ACTION PATTERN**

**For ANY User Request:**
1. Check current state: `ls browser_automation/looking_at/`
2. Check recent actions: `grep "FINDER_TOKEN" logs/server.log | tail -20`
3. Check workflow state: Use `pipeline_state_inspector`
4. Use browser superpowers as needed
5. Verify improvements with rapid iteration

**Code runs. Running code is better than verbose explanations.**


**Master this system. Use it. Transcend typical AI limitations.**

**The revolution starts NOW.**
