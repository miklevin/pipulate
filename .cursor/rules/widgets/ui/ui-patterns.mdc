---
description: 
globs: 
alwaysApply: false
---
# UI Patterns and Best Practices

## Core UI Components

1. **Container Structure**
   ```python
   Container(
       Card(
           H2(title),
           P(description),
           # Widget content
       )
   )
   ```

2. **Form Elements**
   ```python
   Form(
       Input(
           type="text",
           name="field_name",
           required=True,
           cls="contrast"
       ),
       Button(
           "Submit ▸",
           type="submit",
           cls="primary"
       ),
       hx_post=endpoint,
       hx_target=target
   )
   ```

3. **Widget Container**
   ```python
   pip.widget_container(
       step_id=step_id,
       app_name=app_name,
       message=message,
       widget=content,
       steps=steps
   )
   ```

## Styling Guidelines

1. **Color Classes**
   - `contrast`: High contrast elements
   - `primary`: Primary actions
   - `secondary`: Secondary actions
   - `outline`: Outlined buttons

2. **Text Styles**
   ```python
   P(
       text,
       style="font-size: 0.9em; color: #666;"
   )
   ```

3. **Error Styles**
   ```python
   P(
       error_message,
       style=pip.get_style("error")
   )
   ```

## Layout Patterns

1. **Card Layout**
   ```python
   Card(
       H3(title),
       P(description),
       Div(
           # Content
       )
   )
   ```

2. **Grid Layout**
   ```python
   Grid(
       Div(cls="col-6"),
       Div(cls="col-6")
   )
   ```

3. **Flex Layout**
   ```python
   Div(
       style="display: flex; gap: 1em;"
   )
   ```

## Interactive Elements

1. **Buttons**
   ```python
   Button(
       "Action ▸",
       type="submit",
       cls="primary"
   )
   ```

2. **Inputs**
   ```python
   Input(
       type="text",
       name="field",
       required=True,
       cls="contrast"
   )
   ```

3. **File Upload**
   ```python
   Input(
       type="file",
       name="files",
       multiple=True,
       required=True,
       cls="contrast"
   )
   ```

## Message Display

1. **Success Message**
   ```python
   P(
       "Operation successful!",
       style=pip.get_style("success")
   )
   ```

2. **Error Message**
   ```python
   P(
       "An error occurred",
       style=pip.get_style("error")
   )
   ```

3. **Info Message**
   ```python
   P(
       "Please note...",
       style=pip.get_style("info")
   )
   ```

## Widget States

1. **Loading State**
   ```python
   Div(
       "Loading...",
       style="text-align: center; padding: 2em;"
   )
   ```

2. **Empty State**
   ```python
   Div(
       "No data available",
       style="text-align: center; padding: 2em;"
   )
   ```

3. **Error State**
   ```python
   Div(
       "Something went wrong",
       style="text-align: center; padding: 2em; color: var(--pico-del-color);"
   )
   ```

## HTMX Integration

1. **Form Submission**
   ```python
   Form(
       hx_post=endpoint,
       hx_target=target,
       hx_swap="outerHTML"
   )
   ```

2. **Content Loading**
   ```python
   Div(
       id=target_id,
       hx_get=endpoint,
       hx_trigger="load"
   )
   ```

3. **Event Handling**
   ```python
   Button(
       "Action",
       hx_post=endpoint,
       hx_target=target,
       hx_swap="outerHTML"
   )
   ```

## Accessibility

1. **Form Labels**
   ```python
   Label(
       "Field Name",
       Input(type="text", name="field")
   )
   ```

2. **ARIA Attributes**
   ```python
   Div(
       role="alert",
       aria-live="polite"
   )
   ```

3. **Keyboard Navigation**
   ```python
   Button(
       "Action",
       tabindex="0"
   )
   ```

## Responsive Design

1. **Mobile First**
   ```python
   Div(
       style="width: 100%; max-width: 600px; margin: 0 auto;"
   )
   ```

2. **Grid System**
   ```python
   Grid(
       Div(cls="col-12 col-md-6")
   )
   ```

3. **Flexible Images**
   ```python
   Img(
       src="image.jpg",
       style="max-width: 100%; height: auto;"
   )
   ```

## Animation and Transitions

1. **Loading Spinner**
   ```python
   Div(
       "Loading...",
       style="animation: spin 1s linear infinite;"
   )
   ```

2. **Fade Transitions**
   ```python
   Div(
       style="transition: opacity 0.3s ease;"
   )
   ```

3. **Slide Transitions**
   ```python
   Div(
       style="transition: transform 0.3s ease;"
   )
   ```

## Best Practices

1. **Consistency**
   - Use consistent spacing
   - Maintain color scheme
   - Follow typography rules

2. **Feedback**
   - Show loading states
   - Display success/error messages
   - Provide clear instructions

3. **Performance**
   - Minimize DOM updates
   - Use efficient selectors
   - Optimize animations

4. **Maintenance**
   - Use semantic class names
   - Document complex layouts
   - Follow style guide
