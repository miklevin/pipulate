---
description: 
globs: 
alwaysApply: false
---
# Widget Data Transformation

## Common Data Formats

### JSON
- Primary format for widget data exchange
- Consistent structure for widget input/output
- Example:
```python
{
    "data": [...],
    "metadata": {
        "type": "table",
        "format": "pandas"
    }
}
```

### Table Data
- Pandas DataFrame serialization
- Rich table formatting
- Example:
```python
{
    "columns": [...],
    "data": [...],
    "style": {...}
}
```

## Transformation Patterns

### Table to Chart
```python
def table_to_chart_data(table_data):
    """Transform table data for chart widget."""
    return {
        "labels": table_data["columns"],
        "datasets": [{
            "data": row,
            "label": f"Series {i}"
        } for i, row in enumerate(table_data["data"])]
    }
```

### Chart to Table
```python
def chart_to_table_data(chart_data):
    """Transform chart data for table widget."""
    return {
        "columns": ["Category", "Value"],
        "data": [
            [label, value]
            for label, value in zip(chart_data["labels"], chart_data["datasets"][0]["data"])
        ]
    }
```

## Best Practices
1. Use consistent data structures
2. Implement validation at transformation boundaries
3. Handle missing or malformed data gracefully
4. Document transformation requirements
5. Consider performance for large datasets

## Common Transformations
1. Table data to visualization formats
2. Raw data to structured formats
3. Multiple data sources to unified format
4. Format-specific optimizations
