---
description:
globs:
alwaysApply: false
---
# Widget Patterns and Best Practices

## Core Widget Structure

Every widget in Pipulate follows a consistent pattern:

1. **Class Definition**
   - Unique `APP_NAME` for routing
   - Descriptive `DISPLAY_NAME` for UI
   - Clear `ENDPOINT_MESSAGE` for user guidance
   - Optional `TRAINING_PROMPT` for AI assistance

2. **Step Definition**
   ```python
   Step(
       id='step_01',
       done='data_field',  # Field to store widget data
       show='Widget Name', # User-friendly name
       refill=True,        # Whether to show previous data
       transform=lambda x: x.strip() if x else ""  # Optional data transform
   )
   ```

3. **Route Registration**
   - Standard routes: landing, init, finalize, unfinalize
   - Step-specific routes: step_XX and step_XX_submit
   - Custom routes as needed

## Widget State Management

1. **State Storage**
   - Use `pip.update_step_state()` to save data
   - Store in workflow-specific state
   - Include metadata for widget type

2. **State Retrieval**
   - Use `pip.get_step_data()` to read state
   - Handle missing data gracefully
   - Support revert functionality

3. **Finalization**
   - Lock widget state when finalized
   - Show locked view with data
   - Support unfinalize for editing

## Widget UI Patterns

1. **Input Form**
   ```python
   Form(
       Input(type="file", name="field_name", required=True),
       Button("Submit â–¸", type="submit", cls="primary"),
       hx_post=f"/{app_name}/{step_id}_submit",
       hx_target=f"#{step_id}"
   )
   ```

2. **Widget Container**
   ```python
   pip.widget_container(
       step_id=step_id,
       app_name=app_name,
       message=f"{step.show}: Complete",
       widget=widget_content,
       steps=steps
   )
   ```

3. **Error Handling**
   - Validate input before processing
   - Show clear error messages
   - Support retry functionality

## Widget Types

1. **Simple Widgets**
   - Basic HTML content
   - No JavaScript execution
   - Example: Text display, simple forms

2. **Interactive Widgets**
   - JavaScript execution
   - Client-side rendering
   - Example: Charts, diagrams

3. **File Widgets**
   - File upload/download
   - File processing
   - Example: File uploader, image viewer

4. **Data Widgets**
   - Data visualization
   - Table display
   - Example: Pandas tables, Rich tables

## Best Practices

1. **Error Handling**
   - Validate all inputs
   - Handle file operations safely
   - Provide clear error messages

2. **State Management**
   - Keep state minimal
   - Support revert functionality
   - Handle finalization properly

3. **UI/UX**
   - Clear instructions
   - Progress feedback
   - Consistent styling

4. **Security**
   - Validate file types
   - Sanitize inputs
   - Handle paths safely

## Common Pitfalls

1. **State Management**
   - Forgetting to save state
   - Not handling missing data
   - Incomplete revert support

2. **UI Updates**
   - Missing HTMX triggers
   - Incorrect target elements
   - Stale state display

3. **File Operations**
   - Unsafe file paths
   - Missing error handling
   - Incomplete cleanup

## Recovery Process

1. **State Recovery**
   - Check workflow state
   - Validate data integrity
   - Support manual recovery

2. **UI Recovery**
   - Clear error states
   - Provide retry options
   - Maintain user context

3. **File Recovery**
   - Clean up temporary files
   - Handle partial uploads
   - Support retry mechanisms
