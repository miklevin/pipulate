---
description:
globs:
alwaysApply: false
---
# Botify API Integration Patterns

## API Evolution Complexity

Botify's API has evolved from BQLv1 to BQLv2, but **BOTH versions coexist and are required** for different data types:

- **Web Logs**: Uses BQLv1 with special endpoint (`app.botify.com/api/v1/logs/...`)
- **Crawl/GSC**: Uses BQLv2 with standard endpoint (`api.botify.com/v1/projects/.../query`)

## Critical API Differences

### Base URLs:
- **BQLv1 (Web Logs)**: `app.botify.com`
- **BQLv2 (Crawl/GSC)**: `api.botify.com`

### Date Handling:
- **BQLv1**: Dates at payload level
- **BQLv2**: Dates in periods array

### Payload Structures:
```python
# BQLv1 (Web Logs) - Legacy format
{
    "start_date": "2024-01-01",
    "end_date": "2024-01-31",
    "fields": ["url", "crawls.google.count"],
    "filters": {"crawls.google.count": {"$gt": 0}}
}

# BQLv2 (Crawl/GSC) - Modern format  
{
    "dimensions": ["url"],
    "metrics": [...],
    "filters": {...},
    "periods": [{"start_date": "2024-01-01", "end_date": "2024-01-31"}]
}
```

## Python Code Generation

The workflows generate Python code for **both patterns** to enable Jupyter debugging:

- `/jobs` endpoint: For CSV exports
- `/query` endpoint: For quick debugging

## Common Pitfalls

1. **Wrong Base URL**: Using `api.botify.com` for web logs (should be `app.botify.com`)
2. **Missing Dates**: Causes 404 errors in generated URLs
3. **Mixed BQL Versions**: Using BQLv2 structure with BQLv1 endpoint
4. **Template Confusion**: Not all query types should be templated (web logs are intentionally hardcoded)

## Template Strategy

**Web Logs are NOT templated** (KISS principle):
- Simple, consistent queries that rarely change
- Always same fields: `['url', 'crawls.google.count']`
- Always same filter: `crawls.google.count > 0`
- Adding templates would require separate BQLv1 system for minimal benefit

## File Locations

- Query Templates: [400_botify_quadfecta.py](mdc:pipulate/plugins/400_botify_quadfecta.py) (lines ~138-270)
- API Methods: Search for `build_exports`, `poll_job_status` in workflow files
- Code Generation: `_generate_bqlv1_python_code`, `_generate_bqlv2_python_code` methods
