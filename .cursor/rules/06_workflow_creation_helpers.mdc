---
description: 
globs: 
alwaysApply: false
---
# Pipulate Workflow Creation Helper Tools System

## Overview

The Pipulate framework includes a sophisticated set of helper tools for creating, modifying, and composing workflows. These tools work together to enable rapid workflow development through template-based creation, marker-driven precision operations, and step logic sharing.

## Core Helper Tools

### 1. create_workflow.py - Template-Based Workflow Creation
**Purpose**: Creates new workflows from established templates with intelligent template selection.

**Key Features**:
- **Template System**: Supports `blank`, `hello`, and `quadfecta` templates with different complexity levels
- **Dynamic Root Finding**: Works from any location by automatically finding Pipulate project root
- **Class Metadata Replacement**: Updates APP_NAME, DISPLAY_NAME, ENDPOINT_MESSAGE, TRAINING_PROMPT
- **Force Mode**: `--force` flag for overwriting existing workflows

**Template Map**: [create_workflow.py](mdc:pipulate/helpers/create_workflow.py) lines 35-42
```python
TEMPLATE_MAP = {
    "blank": "300_blank_placeholder.py",      # Minimal single-step template
    "hello": "500_hello_workflow.py",         # 2-step hello world template  
    "quadfecta": "400_botify_quadfecta.py",     # Complex multi-export template
}
```

**Usage Patterns**:
```bash
# Create blank workflow for learning/customization
python helpers/create_workflow.py 035_kungfu_workflow.py KungfuWorkflow kungfu "Kung Fu Download" "Welcome message" "Training prompt" --template blank

# Create hello world template (2 steps ready to use)
python helpers/create_workflow.py 036_hello_demo.py HelloDemo hello_demo "Hello Demo" "Welcome" "Training" --template hello

# Create quadfecta template (5 steps for complex data workflows)
python helpers/create_workflow.py 037_botify_custom.py BotifyCustom botify_custom "Custom Botify" "Welcome" "Training" --template quadfecta
```

### 2. manage_class_attributes.py - Attribute Merging System
**Purpose**: Merges specific class attributes (like UI_CONSTANTS) between workflows while preserving class structure.

**Key Features**:
- **Selective Merging**: `--attributes-to-merge` parameter for precise control
- **UI_CONSTANTS Preservation**: Maintains styling consistency across workflows
- **Class Boundary Detection**: Intelligently identifies class attribute boundaries
- **Safe Merging**: Validates attribute compatibility before merging

**Common Use Case**: Sharing UI styling patterns
```bash
python helpers/manage_class_attributes.py source_workflow.py target_workflow.py --attributes-to-merge UI_CONSTANTS --force
```

**Integration Pattern**: Usually step 2 in 5-command sequences to merge styling from templates.

### 3. splice_workflow_step.py - Step Addition System  
**Purpose**: Adds new placeholder steps to existing workflows using marker-driven insertion.

**Key Features**:
- **Marker-Based Insertion**: Uses `--- STEPS_LIST_INSERTION_POINT ---` for precise placement
- **Position Control**: `--position top|bottom` for step placement
- **Template Generation**: Creates both step definition and method templates
- **Maintains Chain Reaction**: Preserves HTMX progression patterns

**Marker Requirements**: [splice_workflow_step.py](mdc:pipulate/helpers/splice_workflow_step.py) lines 200-220
- Steps list must include `--- STEPS_LIST_INSERTION_POINT ---` before finalize step
- Class must include `--- STEP_METHODS_INSERTION_POINT ---` at end of methods

**Usage Patterns**:
```bash
# Add step at bottom (default, before finalize)
python helpers/splice_workflow_step.py target_workflow.py

# Add step at top (becomes new first step)  
python helpers/splice_workflow_step.py target_workflow.py --position top
```

### 4. swap_workflow_step.py - Step Logic Replacement
**Purpose**: Replaces step logic between workflows while preserving step structure and IDs.

**Key Features**:
- **Precise Step Targeting**: Specifies exact source and target step IDs
- **Logic Preservation**: Maintains step progression and HTMX chain reactions  
- **Method Pair Handling**: Swaps both GET and POST handlers (step_N and step_N_submit)
- **Boundary Detection**: Intelligently identifies step method boundaries

**Integration Pattern**: Final steps in 5-command sequences to replace placeholder logic with functional implementations.

**Usage Pattern**:
```bash
python helpers/swap_workflow_step.py target_workflow.py target_step_id source_workflow.py source_step_id --force
```

## The Method-Providing Template Pattern

### Two Types of Templates

**Workflow Creation Templates** (like `300_blank_placeholder.py`):
- Provide structural foundation for new workflows
- Include required markers and basic scaffolding
- Used by `create_workflow.py` as starting points

**Method-Providing Templates** (like `500_hello_workflow.py`):
- Provide functional step implementations for swapping
- Contains complete GET/POST handler pairs
- Used by `swap_workflow_step.py` as method sources

### The 5-Command Sausage Factory Pattern

**Critical Pattern from [200_workflow_genesis.py](mdc:pipulate/plugins/200_workflow_genesis.py)**:
The Hello World Recreation demonstrates the complete method-providing template usage:

```bash
# 1. Create blank foundation (workflow creation template)
python helpers/create_workflow.py target.py ClassName app_name "Display Name" "Message" "Training" --template blank

# 2. Condition target for method dependencies (class attribute preparation)
python helpers/manage_class_attributes.py target.py plugins/500_hello_workflow.py --attributes-to-merge UI_CONSTANTS --force

# 3. Replace placeholder with functional logic (method-providing template)
python helpers/swap_workflow_step.py target.py step_01 plugins/500_hello_workflow.py step_01 --force

# 4. Add new placeholder for next functional method
python helpers/splice_workflow_step.py target.py --position bottom

# 5. Replace new placeholder with functional logic (method-providing template)
python helpers/swap_workflow_step.py target.py step_02 plugins/500_hello_workflow.py step_02 --force
```

**Key Insight**: This pattern swaps **blank placeholders** with **functional methods from different template sources**.

### Requirements for Method-Providing Templates

**Critical Criteria for workflows like [500_hello_workflow.py](mdc:pipulate/plugins/500_hello_workflow.py)**:

#### A. Complete Step Method Implementation
```python
async def step_01(self, request):
    """GET handler with proper three-phase pattern"""
    # 1. Finalized phase (locked view)
    # 2. Completed phase (revert view)  
    # 3. Input phase (form view)
    # Must return proper chain reaction trigger

async def step_01_submit(self, request):
    """POST handler with complete processing"""
    # - Process form data
    # - Update state via pip.set_step_data()
    # - Return chain reaction trigger
```

#### B. UI Constants Bundle
```python
# --- START_CLASS_ATTRIBUTES_BUNDLE ---
UI_CONSTANTS = {
    'BUTTON_LABELS': {
        'ENTER_KEY': 'üîë Enter Key',
        'NEXT_STEP': 'Next Step ‚ñ∏'
    },
    'EMOJIS': {
        'KEY': 'üîë',
        'USER_INPUT': 'üë§',
        'GREETING': 'üí¨'
    }
}
# --- END_CLASS_ATTRIBUTES_BUNDLE ---
```

#### C. Self-Contained Logic
- No complex external dependencies
- Compatible state management patterns
- Standard step data structures
- Consistent APP_NAME namespace usage

### Why 500_hello_workflow.py Works Perfectly

**Success Factors**:
- **Atomic Step Logic**: Each step is complete and self-contained
- **Rich UI Constants**: Provides styling that can be merged into targets
- **Template Compatibility**: Uses same patterns as blank placeholder
- **Educational Value**: Simple enough to understand, complex enough to demonstrate

## Preparing 7xx/8xx Plugins as Method-Providing Templates

### Current Plugin Analysis

**7xx Plugins** (Components): `300_blank_placeholder.py`, `540_checkboxes.py`, `560_range.py`
**8xx Plugins** (Widgets): `730_matplotlib.py`, `580_upload.py`, `820_selenium.py`

These are **widget-focused** and need preparation for method-providing template usage.

### Universal Preparation Recipe

#### Step 1: Add Template Assembly Markers
```python
class YourWidget:
    def __init__(self, ...):
        self.steps = [
            Step(id='step_01', done='widget_data', show='Widget Step', refill=True),
            # --- STEPS_LIST_INSERTION_POINT --- 
            Step(id='finalize', done='finalized', show='Finalize', refill=False)
        ]
        
    # ... existing methods ...
    
    # --- STEP_METHODS_INSERTION_POINT ---
```

#### Step 2: Enhance UI Constants Bundle
```python
# --- START_CLASS_ATTRIBUTES_BUNDLE ---
UI_CONSTANTS = {
    'BUTTON_LABELS': {
        'WIDGET_ACTION': 'üéØ Your Widget Action',
        'PROCESS_DATA': 'üîÑ Process Data',
        'VIEW_RESULTS': 'üëÅÔ∏è View Results'
    },
    'WIDGET_CONFIG': {
        'DEFAULT_VALUE': 'your default',
        'VALIDATION_RULES': {...}
    },
    'EMOJIS': {
        'WIDGET_TYPE': 'üîß',  # Specific to your widget
        'DATA_READY': '‚úÖ',
        'PROCESSING': '‚öôÔ∏è'
    }
}
# --- END_CLASS_ATTRIBUTES_BUNDLE ---
```

#### Step 3: Standardize Step Method Signatures
```python
async def step_01(self, request):
    """GET handler with proper three-phase pattern"""
    pip, db, app_name = (self.pipulate, self.db, self.app_name)
    step_id = 'step_01'
    step_index = self.steps_indices[step_id]
    step = self.steps[step_index]
    next_step_id = self.steps[step_index + 1].id
    
    # Implement finalized/completed/input phases
    # Return proper chain reaction trigger

async def step_01_submit(self, request):
    """POST handler with proper state management"""
    pip, db, app_name = (self.pipulate, self.db, self.app_name)
    
    # Process form data
    # Update state with pip.set_step_data()
    # Return chain reaction trigger with next step
```

#### Step 4: Extract Widget Creation Logic
```python
def create_widget_display(self, data):
    """Extracted widget creation logic for reusability"""
    # Make widget creation swappable between workflows
    pass

async def validate_widget_input(self, form_data):
    """Standardized validation pattern"""
    # Common validation approach for consistency
    pass
```

#### Step 5: Test Swappability
```bash
# Test if your widget can be used as method source:
python helpers/swap_workflow_step.py target_workflow.py step_01 \
  plugins/8XX_your_widget.py step_01 --force
```

### Specific Plugin Recommendations

**730_matplotlib.py** ‚Üí **Excellent Candidate**:
- Already has `create_matplotlib_histogram()` method
- Clean JSON input ‚Üí widget output pattern  
- Just needs UI constants and template markers

**580_upload.py** ‚Üí **Good Candidate**:
- File upload pattern is highly reusable
- Needs extraction of upload logic into swappable methods
- Already follows proper chain reaction pattern

**540_checkboxes.py** ‚Üí **Requires Work**:
- Complex option-loading system needs simplification
- Widget logic should be extracted from step logic
- Good candidate after refactoring

### Template Dependency Management

**For Complex Method-Providing Templates like [040_parameter_buster.py](mdc:pipulate/plugins/040_parameter_buster.py)**:

#### Class Attributes to Merge
```python
# In quadfecta pattern from workflow_genesis.py:
python helpers/manage_class_attributes.py target.py \
  plugins/040_parameter_buster.py \
  --attributes-to-merge UI_CONSTANTS,DATA_SOURCES --force
```

#### Method Dependencies
- Helper methods for API calls
- Data validation functions  
- File management utilities
- Background processing patterns

## Race Condition Protection System

### Critical Operations Management
The workflow creation system includes sophisticated race condition protection to prevent watchdog restarts from interrupting multi-command sequences.

**Implementation**: [server.py](mdc:pipulate/server.py) lines 51-72 and [200_workflow_genesis.py](mdc:pipulate/plugins/200_workflow_genesis.py) lines 976-1010

**Key Components**:
- **File-based Flag System**: Uses `.critical_operation_lock` file for cross-process communication
- **Dual Protection**: Both in-memory `shared_app_state` and file flag checked
- **Watchdog Integration**: `ServerRestartHandler` defers restarts during critical operations
- **Automatic Restart**: Triggers server restart after successful workflow creation

**Protection Flow**:
```python
# Before subprocess execution
set_critical_operation_flag()  # Creates .critical_operation_lock

# Watchdog detects file changes but defers restart
log.warning("Watchdog: Critical operation in progress. Deferring restart")

# After subprocess completion
clear_critical_operation_flag()  # Removes .critical_operation_lock
if execution_success:
    restart_server()  # Triggers immediate restart
```

**Log Pattern During Protected Operations**:
```
[WORKFLOW_GENESIS] Starting critical subprocess operation. Pausing Watchdog restarts.
[‚ö†Ô∏è WARNING] Watchdog: Critical operation in progress. Deferring restart for plugins/...
[‚ö†Ô∏è WARNING] Watchdog: Critical operation in progress. Deferring restart for plugins/...
[WORKFLOW_GENESIS] Critical subprocess operation finished. Resuming Watchdog restarts.
[WORKFLOW_GENESIS] Triggering server restart after successful workflow creation.
```

**Benefits**:
- ‚úÖ **No Race Conditions**: All file modifications complete before any restart
- ‚úÖ **Immediate Restart**: No waiting for random file changes to trigger watchdog
- ‚úÖ **Bulletproof Execution**: 5-command sequences execute without interruption
- ‚úÖ **Clean Recovery**: Flag always cleared, system never gets stuck

## Command Sequence Patterns

### The Proven 5-Command Pattern
For transforming simple templates into complex functionality:

```bash
# 1. Create base workflow from template
python helpers/create_workflow.py target.py ClassName app_name "Display Name" "Message" "Training" --template blank

# 2. Merge UI constants for consistent styling  
python helpers/manage_class_attributes.py target.py source.py --attributes-to-merge UI_CONSTANTS

# 3. Replace first step with functional logic
python helpers/swap_workflow_step.py target.py step_01 source.py step_01  

# 4. Add placeholder for second step
python helpers/splice_workflow_step.py target.py --position bottom

# 5. Replace second step with functional logic  
python helpers/swap_workflow_step.py target.py step_02 source.py step_02
```

**Race Condition Protection**: The entire sequence executes atomically with automatic server restart on completion.

### Template-Specific Strategies
- **Blank Template**: Requires full 5-command sequence to build functionality
- **Hello Template**: Single command creates 2-step working workflow  
- **Trifecta Template**: Single command creates 5-step complex workflow

## Marker System Integration

### Template Assembly Markers
Required in all workflows for helper script compatibility:

```python
# In self.steps definition:
self.steps = [
    Step(id='step_01', done='data', show='Step 1', refill=False),
    # --- STEPS_LIST_INSERTION_POINT ---
    Step(id='finalize', done='finalized', show='Finalize', refill=False)
]

# At end of class:
async def existing_method(self, request):
    pass

# --- STEP_METHODS_INSERTION_POINT ---
```

### Atomic Transplantation Support
For reusable workflow sections (see [16_atomic_transplantation_system.mdc](mdc:16_atomic_transplantation_system.mdc)):

```python
# --- START_WORKFLOW_SECTION: section_name ---
# Documentation of atomic unit
# --- SECTION_STEP_DEFINITION ---
# Step definitions
# --- END_SECTION_STEP_DEFINITION ---
# --- SECTION_STEP_METHODS ---  
# Step methods
# --- END_SECTION_STEP_METHODS ---
# --- END_WORKFLOW_SECTION ---
```

## Educational Workflow Genesis

### Progressive Learning Path
The [200_workflow_genesis.py](mdc:pipulate/plugins/200_workflow_genesis.py) workflow teaches the helper tools system:

1. **Step 1**: Define new workflow parameters
2. **Step 2**: Select template and generate creation command  
3. **Step 3**: Execute protected command sequence with automatic restart

### Template-Aware Behavior
- **Simple Templates** (hello, quadfecta): Show single creation command
- **Blank Template**: Show full educational sequence with individual commands
- **Learning Value**: Users understand both simple and complex creation patterns

### Protected Execution
The workflow genesis implements race condition protection for reliable workflow creation:

```python
# Critical operation protection in step_03_submit
try:
    if is_critical_operation_in_progress():
        # Block concurrent operations
        return error_response
    
    set_critical_operation_flag()  # Prevent watchdog restarts
    
    # Execute 5-command sequence
    result = subprocess.run(combined_cmd, ...)
    
    if result.returncode == 0:
        restart_server()  # Trigger restart on success
        
finally:
    clear_critical_operation_flag()  # Always cleanup
```

## Best Practices

### Template Selection Guidelines
- **Blank**: Learning, heavy customization, unique workflows
- **Hello**: Simple 2-step workflows, demos, tutorials  
- **Trifecta**: Complex data workflows, multi-export systems, enterprise patterns

### Method-Providing Template Development
- **Dependency-Light**: Minimize external dependencies for broad compatibility
- **Pattern-Compatible**: Use standard step handler patterns and state management
- **Self-Contained**: Each step should work independently
- **Well-Documented**: Clear UI constants and method signatures

### Workflow Development Strategy
1. **Start with compatible templates** for your use case
2. **Use helper tools for structural changes** (adding/swapping steps)
3. **Preserve markers** for future modifications
4. **Trust the race condition protection** for multi-command sequences
5. **Test frequently** during development

### Marker Maintenance
- **Always include both template assembly markers** in new workflows
- **Consider atomic transplantation markers** for reusable sections
- **Test helper script compatibility** before committing changes
- **Document marker purposes** for future developers

## Integration with Other Systems

### UI and Styling
- **UI_CONSTANTS merging** ensures consistent appearance across workflows
- **Template innovations** can be shared through attribute merging
- **PicoCSS integration** maintained through proper template structure

### Chain Reaction Pattern  
- **Step insertion preserves** HTMX progression triggers
- **Logic swapping maintains** proper chain reaction flow
- **Template compatibility** ensures working progression patterns

### State Management
- **Pipeline IDs preserved** through step modifications
- **State structure maintained** during logic swapping
- **Data flow continuity** ensured by template compatibility

### Server Management
- **Watchdog Integration**: Automatic file change detection with smart deferral
- **Critical Operation Protection**: Prevents interruption of multi-command sequences
- **Automatic Restart**: Ensures new workflows are immediately available

## Troubleshooting

### Common Issues
- **Missing Markers**: Helper scripts fail with "insertion point not found" errors
- **Race Conditions**: Resolved by the protection system - no manual intervention needed
- **Import Errors**: Check console output after server restart for syntax issues
- **Method Compatibility**: Ensure source and target workflows use compatible patterns

### Debug Information
- **File-based Flags**: Check for `.critical_operation_lock` file if operations seem stuck
- **Watchdog Logs**: Look for "Deferring restart" messages during protected operations
- **Restart Triggers**: "Triggering server restart" indicates successful completion
- **Method Swapping**: Verify step IDs exist in both source and target workflows

This helper tools system enables rapid workflow development while maintaining the explicit, debuggable nature that makes WET patterns effective for complex data processing pipelines.
