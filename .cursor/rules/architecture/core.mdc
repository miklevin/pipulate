---
description: 
globs: 
alwaysApply: false
---
---
description: Core architectural principles for the Pipulate framework 
globs: ["pipulate/**/*.py"]
alwaysApply: true
---

# Pipulate Architecture Guide

## Core Philosophy

Pipulate follows these key principles:

- **Local-First & Single-Tenant**: All data stays on the user's machine, ensuring privacy and eliminating cloud costs
- **Simplicity & Observability**: Server-side state management via SQLite for transparency ("Know EVERYTHING!")
- **Reproducibility**: Nix Flakes ensure identical environments across operating systems
- **WET Workflows, DRY CRUD**: Workflows are explicit (Write Everything Twice) for clarity, while CRUD uses DRY patterns

## Key Components

```
                 ┌─────────────┐ 
                 │   Browser   │ 
                 └─────┬───────┘
                       │ HTTP/WS
                       ▼
    ┌───────────────────────────────────────┐
    │           Nix Flake Shell             │ 
    │  ┌───────────────┐  ┌──────────────┐  │ 
    │  │   FastHTML    │  │    Ollama    │  │ 
    │  │   HTMX App    │  │  Local LLM   │  │ 
    │  └───────┬───────┘  └──────────────┘  │
    │          │                            │
    │    ┌─────▼─────┐     ┌────────────┐   │
    │    │MiniDataAPI│◄───►│ SQLite DB  │   │
    │    └───────────┘     └────────────┘   │
    └───────────────────────────────────────┘
```

### Technology Stack
- **FastHTML**: Python-based HTML generation (no templates)
- **HTMX**: Server-rendered UI with minimal JavaScript
- **MiniDataAPI**: Simple SQLite interaction layer
- **Ollama**: Local LLM integration
- **SQLite**: Data persistence
- **Nix**: Environment reproducibility

## File Organization

- **server.py**: Main application entry point
- **plugins/**: Contains CRUD apps and Workflows
  - Naming: `XX_name.py` (numerical prefix determines menu order)
  - Special prefixes: `xx_` (development/skipped), files with parentheses also skipped
- **data/**: Contains the SQLite database
- **training/**: Markdown files for AI context/prompts
- **static/**: JS, CSS, and images

## Main Patterns

1. **Plugin Types**:
   - **CRUD Apps**: Inherit from `BaseCrud` (profiles_app.py, todo_app.py)
   - **Workflows**: Plain Python classes with step-based progression

2. **State Management**:
   - **Workflows**: JSON blobs in `pipeline` table via DictLikeDB
   - **CRUD**: Standard tables via MiniDataAPI

3. **Communication**:
   - **HTTP**: Standard requests and form submissions
   - **WebSockets**: LLM streaming and chat
   - **SSE**: Live reloading and progress updates

The server.py file contains the main application setup. Plugins are automatically discovered and registered based on naming conventions.

## Critical Implementation Patterns

1. **HTMX Chain Reaction:**  
   - The pattern `Div(id=next_step_id, hx_get=f"/{app_name}/{next_step_id}", hx_trigger="load")` must be preserved exactly
   - Never remove the `hx_trigger="load"` attribute even if it seems redundant
   - This explicit approach is the reliable standard for the application and alternative implicit approaches are not supported

2. **Step Progression Pattern**:
   - **GET Handler** displays UI for user input and must follow this structure:
     ```python
     return Div(
         Card(...),  # Current step content
         Div(id=next_step_id, hx_get=f"/{app_name}/{next_step_id}", hx_trigger="load"),  # Next step loader
         id=step_id
     )
     ```
   - **POST Handler** processes submitted data and must include chain reaction:
     ```python
     # Process form data, validate, and store
     await pip.set_step_data(pipeline_id, step_id, value, steps)
     
     return Div(
         pip.revert_control(...),  # Shows completed step with revert option
         Div(id=next_step_id, hx_get=f"/{app_name}/{next_step_id}", hx_trigger="load"),  # CRITICAL! Triggers next step
         id=step_id  # CRITICAL! Maintains current step ID
     )
     ```

## Important Note on Workflow Identity

Pipulate workflows have two separate identities:
- The **filename** (`110_parameter_buster_workflow.py`) determines the URL/endpoint users access
- The **APP_NAME** (`"parameter_buster"`) identifies the workflow in the database

Keeping these different (as in the example above) allows you to improve user-facing URLs without breaking existing workflow data. Always maintain a consistent APP_NAME when you want to preserve existing workflow state data.

## Reference Other Rules
For detailed implementation patterns, refer to:
- [htmx-chain-reactions.mdc](mdc:.cursor/rules/htmx-chain-reactions.mdc): Details on the chain reaction pattern
- [placeholder-step-pattern.mdc](mdc:.cursor/rules/placeholder-step-pattern.mdc): How to implement placeholder steps
- [wet-workflows.mdc](mdc:.cursor/rules/wet-workflows.mdc): Complete workflow development guidelines
