---
description: 
globs: 
alwaysApply: false
---
# Architecture Documentation Guidelines

## Core Architecture Principles

### 1. Local-First & Single-Tenant
- Data privacy and control
- No cloud dependencies
- Full resource access
- Eliminate vendor lock-in

### 2. Simplicity & Observability
- Server-side state management
- Transparent data flow
- Explicit state changes
- Debuggable architecture

### 3. Reproducibility
- Nix Flakes for environments
- Cross-platform compatibility
- Consistent dependencies
- GPU support options

### 4. Future-Proofing
- Standard HTTP/HTML
- Python-based backend
- Local AI integration
- Minimal JavaScript

## Technical Stack Documentation

### FastHTML Framework
- Direct HTML generation
- No template languages
- Minimal JavaScript
- Server-side rendering

### HTMX Integration
- Dynamic UI updates
- Server-rendered HTML
- State management
- Event handling

### MiniDataAPI
- Simple SQLite interaction
- Dictionary-based operations
- Type safety
- CRUD operations

### Ollama Integration
- Local LLM support
- WebSocket streaming
- Context management
- Privacy-focused

## System Architecture

### Workflow System
- Step-based progression
- Chain reaction pattern
- State preservation
- Interruption handling

### Plugin System
- CRUD applications
- Workflow plugins
- Discovery mechanism
- Development workflow

### State Management
- DictLikeDB for workflows
- MiniDataAPI for CRUD
- JSON-based state
- State recovery

### Communication Channels
- HTTP for standard operations
- WebSockets for streaming
- SSE for updates
- Event handling

## Development Patterns

### Workflow Implementation
- Step definition
- State management
- Route registration
- Error handling

### Plugin Development
- Template usage
- Testing workflow
- Deployment process
- Version control

### Data Visualization
- Plot generation
- Base64 encoding
- HTML embedding
- Responsive design

## Best Practices

### Code Organization
- Clear file structure
- Consistent naming
- Documentation
- Error handling

### State Management
- Explicit state changes
- Error recovery
- State validation
- Data persistence

### Performance
- Resource optimization
- Caching strategies
- Load management
- Memory usage

### Security
- Local data storage
- Input validation
- Error handling
- Access control

## Related Rules
- [Development Guide](mdc:development-guide.mdc)
- [Widget Implementation](mdc:widget-implementation.mdc)
- [Error Handling](mdc:widget-error-handling.mdc)
