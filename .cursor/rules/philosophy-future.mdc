---
description: 
globs: 
alwaysApply: false
---
# Future Philosophy: Evolution Not Revolution

Pipulate's path forward is about careful evolution while maintaining its core principles. This document outlines how new features and capabilities should be considered and implemented.

## The Workbench Vision

1. **Tool-First Thinking**
   - Each feature should feel like a distinct tool
   - Clear purpose and boundaries
   - Self-contained functionality
   - Explicit over implicit

2. **Persona Management**
   - Filter available tools by role
   - Don't complicate individual tools
   - Separate tools over conditional logic
   - Example: `100_seo_crawl_analyzer.py` vs `101_dev_crawl_debugger.py`

3. **Feature Evolution**
   - Add capabilities through new tools
   - Maintain existing tool simplicity
   - Leverage core patterns
   - Resist feature creep

## Growth Principles

1. **Vertical Over Horizontal**
   - Deep, focused tools over broad platforms
   - Master specific workflows
   - Quality over quantity
   - Depth over breadth

2. **Local-First Forever**
   - Strengthen local capabilities
   - Embrace local LLMs
   - Local data processing
   - Optional cloud integration

3. **UI Evolution**
   - Server-side intelligence
   - Strategic HTMX usage
   - Minimal necessary JavaScript
   - Progressive enhancement

## Implementation Guidelines

1. **New Features**
   - Must fit workbench metaphor
   - Should be self-contained
   - Follow existing patterns
   - Maintain observability

2. **Complexity Management**
   - Add power through composition
   - Keep individual parts simple
   - Resist framework thinking
   - Maintain "one person" understanding

3. **Technology Adoption**
   - Embrace powerful simplicity
   - Avoid trendy complexity
   - Strategic modernization
   - Purposeful tooling

## The Path Forward

1. **Core Strengths**
   - Double down on local-first
   - Enhance LLM integration
   - Improve tool discovery
   - Refine workflow patterns

2. **Growth Areas**
   - Specialized workflow tools
   - Enhanced visualization
   - Better tool organization
   - Improved documentation

3. **Boundaries**
   - No multi-user features
   - No complex state management
   - No heavy client-side apps
   - No enterprise patterns

## Philosophical Tests

When considering new features or changes, ask:

1. **Simplicity Test**
   - Can one person understand it?
   - Is it unnecessarily complex?
   - Does it maintain clarity?
   - Is it observable?

2. **Tool Test**
   - Does it feel like a distinct tool?
   - Is it self-contained?
   - Does it have clear boundaries?
   - Is it focused?

3. **Pattern Test**
   - Does it follow core patterns?
   - Does it leverage existing structures?
   - Does it maintain consistency?
   - Is it explicit?

## Example: Persona Evolution

The persona system exemplifies these principles:

1. **Simple Implementation**
   - Single state flag (`db['ui_persona']`)
   - Server-side filtering
   - Standard UI patterns
   - Clear behavior

2. **Tool Separation**
   - Distinct tools per persona
   - Clear tool categorization
   - Simple discovery
   - No conditional complexity

3. **Pattern Alignment**
   - Uses existing structures
   - Maintains server control
   - Follows UI patterns
   - Preserves observability

See also:
- [philosophy-core.mdc](mdc:philosophy-core.mdc)
- [philosophy-simplicity.mdc](mdc:philosophy-simplicity.mdc)
- [architecture-persona.mdc](mdc:architecture-persona.mdc)
