---
description: 
globs: 
alwaysApply: false
---
# Jekyll Environment Setup and Troubleshooting

## Environment Configuration
The Jekyll environment is configured through the [flake.nix](mdc:Pipulate.com/flake.nix) file, which sets up:
- Ruby environment with necessary gems
- Native library paths for gem compilation
- Bundler configuration
- Jekyll server management

## Key Environment Variables
```bash
GEM_HOME=$PWD/.gem
GEM_PATH=$GEM_HOME
PATH=$GEM_HOME/bin:$PATH
BUNDLE_GEMFILE=$PWD/Gemfile
BUNDLE_PATH=$GEM_HOME
```

## Common Issues and Solutions

### Ruby Version Mismatch
If you see errors about incompatible library versions:
1. The script will automatically detect and rebuild gems
2. For FFI gem specifically, only the FFI gem will be rebuilt
3. For other version mismatches, a full rebuild may be necessary

### Missing Gems
If gems are missing or not found:
1. The script will automatically run `bundle install`
2. All necessary build configurations are set automatically
3. Native extensions are built with system libraries

### Port Configuration
- Default port is 4000
- Can be overridden by creating a `.port` file in the site root
- Port is automatically read and used by the `jes` command

## Available Commands

### jes
Main command to start the Jekyll server:
- Automatically checks Ruby environment
- Rebuilds gems if necessary
- Starts server on configured port
- Enables auto-regeneration

### jes-stop
Stops any running Jekyll servers.

### rebuild-gems
Manually rebuilds native gem extensions if needed.

### reset-ruby-env
Completely resets the Ruby environment:
- Backs up Gemfile and Gemfile.lock
- Removes .gem directory
- Reinstalls all gems

## Debugging Tips
1. Check version numbers in error messages
2. Look for specific gem-related errors
3. Verify environment variables are set correctly
4. Check for port conflicts
5. Ensure all native libraries are available

## Best Practices
1. Always use `jes` to start the server
2. Let the script handle gem installation
3. Use `jes-stop` before starting a new server
4. Keep the `.port` file if you need a specific port
5. Use `reset-ruby-env` only as a last resort
