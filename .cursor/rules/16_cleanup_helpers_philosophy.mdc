---
description: 
globs: 
alwaysApply: false
---
# Supporting Tools Philosophy - Precision Helpers

## Current Status: **Mostly Superseded by Template-Based Creation**

**Primary Workflow Creation**: See [05_workflow_creation_helpers.mdc](mdc:05_workflow_creation_helpers.mdc) for the main workflow creation system using the proven 4-tool helper suite.

## Historical Context

The cleanup helpers represented a **precision-over-intelligence** approach to development tooling. Most functionality has been superseded by the template-based creation system, but some precision tools remain valuable for edge cases.

## Evolution: From Complex Helpers to Simple Templates

**Previous Focus**: Complex precision tools for structural modifications
- Led to tool proliferation and maintenance overhead
- Required understanding of many different helper utilities
- Token-intensive for operations that should be simple

**Current Focus**: Template-based creation with focused helpers
- Simple, reliable 4-tool system covers 95% of workflow creation needs
- Deterministic success with established patterns  
- Clear learning path through the workflow genesis system

## Remaining Precision Tool Territory

### When Specialized Tools Are Still Needed
- **Bulk operations** across multiple files simultaneously
- **Exact positioning** for complex marker insertion (edge cases)
- **Style refactoring** across existing codebases
- **Template development** when creating new workflow templates

### Active Precision Tools
- **[atomic_transplantation_marker_tool.py](mdc:pipulate/helpers/cleanup/atomic_transplantation_marker_tool.py)**: Exact marker insertion for edge cases
- **Style analysis tools**: For maintaining consistent UI patterns across existing workflows
- **Formatting tools**: For standardizing existing workflow structures

## Integration with Template-Based Development

### Complementary Workflow (Rare Cases)
1. **Start with Template Creation**: Use Rule 05 system for 95% of workflow creation
2. **Precision Tools for Edge Cases**: Only when template system can't handle specific requirements
3. **Style Consistency**: Use style tools for maintaining existing workflow appearance
4. **Template Development**: Use precision tools when developing new templates

### When NOT to Use Precision Tools
- **New workflow creation**: Use template-based creation (Rule 05)
- **Adding steps to workflows**: Use `splice_workflow_step.py` (Rule 05)
- **Sharing logic between workflows**: Use `swap_workflow_step.py` (Rule 05)
- **Standard structural changes**: Template creation system handles these

## Philosophy: Templates First, Precision When Necessary

### Recommended Approach
1. **Template-Based Creation**: Default to Rule 05 system
2. **Additive Enhancement**: Build on working templates  
3. **Precision Only for Edge Cases**: When template system insufficient
4. **Maintain Simplicity**: Avoid tool proliferation

### Success Pattern
- **95% of workflow development**: Template-based creation (Rule 05)
- **4% edge cases**: Precision tools for specific requirements
- **1% template development**: Precision tools for creating new templates

## Recommendation

**For Normal Workflow Development**: Use the template-based creation system documented in [05_workflow_creation_helpers.mdc](mdc:05_workflow_creation_helpers.mdc).

**For Edge Cases Only**: Consider precision tools when template system can't handle specific positioning or bulk operation requirements.

The precision-over-intelligence philosophy remains valid, but is now primarily embodied in the simple, reliable template-based creation system rather than complex specialized tools.
