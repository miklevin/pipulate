---
description:
globs:
alwaysApply: false
---
# Pipulate Framework Rule Routing Guide

This meta-rule helps route queries to the most relevant detailed guidelines from our knowledge base.

## Core Concepts & Architecture
* For questions about core philosophy or high-level architecture:
  * [01_philosophy.mdc](mdc:01_philosophy.mdc)
  * [02_architecture_overview.mdc](mdc:02_architecture_overview.mdc)
* For questions about future vision, evolutionary roadmap, or advanced architectural concepts:
  * [18_evolutionary_vision.mdc](mdc:18_evolutionary_vision.mdc) - Future architectural patterns and content curation systems

## Environment & Setup
* For questions about environment, Nix, or installation:
  * [03_environment_and_installation.mdc](mdc:03_environment_and_installation.mdc)

## Workflow Development
* For workflow development, step definitions, state management, APP_NAME, keys, or plugin structure:
  * [04_workflow_core.mdc](mdc:04_workflow_core.mdc) - Basic workflow concepts
  * [05_chain_reaction_pattern.mdc](mdc:05_chain_reaction_pattern.mdc) - HTMX step progression
  * [06_workflow_creation_helpers.mdc](mdc:06_workflow_creation_helpers.mdc) - Template-based workflow creation
  * [07_key_system.mdc](mdc:07_key_system.mdc) - Pipeline ID management
  * [12_plugin_development_guidelines.mdc](mdc:12_plugin_development_guidelines.mdc) - Plugin best practices and code organization
  * [15_wet_workflow_conventions.mdc](mdc:15_wet_workflow_conventions.mdc) - WET workflow patterns and conventions

## UI & Frontend
* For UI, HTMX interactions, PicoCSS Forms, JavaScript patterns, or FastHTML components:
  * [08_ui_and_htmx.mdc](mdc:08_ui_and_htmx.mdc) - Includes JavaScript hybrid patterns

## Data & Files
* For database operations (MiniDataAPI, DictLikeDB), file uploads, or downloads:
  * [10_data_and_file_operations.mdc](mdc:10_data_and_file_operations.mdc)

## LLM Integration
* For LLM integration (Ollama), chat context, or OrderedMessageQueue:
  * [09_llm_integration.mdc](mdc:09_llm_integration.mdc)

## Browser Automation
* For Selenium browser automation:
  * [11_browser_automation.mdc](mdc:11_browser_automation.mdc)

## Server & Core
* For server.py internals (app setup, routing, global instances):
  * [13_server_py_overview.mdc](mdc:13_server_py_overview.mdc)

## Testing & Debugging
* For debugging issues or testing advice:
  * [14_testing_and_debugging.mdc](mdc:14_testing_and_debugging.mdc)

## Maintenance & Tooling
* For atomic transplantation, code markers, or deterministic code transplantation:
  * [16_atomic_transplantation_system.mdc](mdc:16_atomic_transplantation_system.mdc) - Marker system for code transplantation
* For cleanup helpers, precision tooling, or maintenance automation:
  * [17_cleanup_helpers_philosophy.mdc](mdc:17_cleanup_helpers_philosophy.mdc) - Precision-over-intelligence tooling approach

## Usage Notes
1. This meta-rule is automatically included in every conversation
2. Other rules are only included when specifically relevant to the query
3. File references use the format `[filename.mdc](mdc:filename.mdc)` to link to actual rule files
4. The routing guide helps quickly identify the most relevant detailed guidelines for any given query
