---
description: 
globs: 
alwaysApply: false
---
# Critical Pipulate Patterns

This document contains **non-negotiable rules and patterns**. They are essential to the correct functioning of the Pipulate framework. Modifying the logic described here without a deep understanding of the system architecture **will break the application**. These are the patterns most frequently misunderstood or broken by AI assistants.

---

### Critical Pattern #1: The Auto-Key Generation Flow

This is the most frequently missed pattern. When a user hits Enter on an empty key field, this exact sequence MUST occur:

1. **POST to `/init`**: An empty `pipeline_id` is submitted.
2. **Return `HX-Refresh`**: The `init` method **MUST** detect the empty input and return only a `HX-Refresh: true` header.
   ```python
   if not user_input:
       from starlette.responses import Response
       response = Response('')
       response.headers['HX-Refresh'] = 'true'
       return response
   ```
3. **Full Page Reload**: HTMX refreshes the page.
4. **`landing()` Populates Key**: The `landing()` method now calls `pip.generate_pipeline_key(self)` to populate the input with a new, sequential key. The input MUST have the `_onfocus='this.setSelectionRange(this.value.length, this.value.length)'` attribute.
5. **User Submits Again**: The user hits Enter on the pre-filled key to start the workflow.

---

### Critical Pattern #2: The `hx_trigger="load"` Chain Reaction

Workflow progression is driven by an HTMX chain reaction. A completed step's response HTML **MUST** include a trigger for the next step.

```python
# The response for a completed step MUST contain the trigger for the next.
return Div(
    # ... content of the current, completed step ...
    
    # CRITICAL: This Div triggers the NEXT step. DO NOT REMOVE OR MODIFY.
    Div(
        id=next_step_id,
        hx_get=f"/{self.APP_NAME}/{next_step_id}",
        hx_trigger="load" 
    ),
    id=current_step_id 
)
```

The `pip.run_all_cells(app_name, steps)` helper correctly implements this and is the required method for initializing a workflow chain in `init()`, `unfinalize()`, and `handle_revert()`.

---

### Critical Pattern #3: `APP_NAME` vs. Filename

- **Filename** (e.g., `040_hello_workflow.py`): Determines the **public URL** (`/hello_workflow`) and menu order. Can be changed.
- **`APP_NAME` Constant** (e.g., `APP_NAME = "hello"`): The **stable, internal ID** for database storage and internal routing. **MUST NEVER BE CHANGED** once workflows have stored data.

---

### Critical Pattern #4: Server Environment & Watchdog

- **NEVER restart the server manually.** The watchdog handles it automatically when a `.py` file is saved.
- **ALWAYS run commands inside the Nix environment** by first running `nix develop .#quiet` in the project root.

---

### Critical Pattern #5: Python Sorting Truthiness

When sorting by a numeric field where `0` is a valid value (like `priority`):

- **❌ WRONG:** `key=lambda item: item.priority or 99` (treats `0` as `None`)
- **✅ CORRECT:** `key=lambda item: item.priority if item.priority is not None else 99`

---

### Critical Pattern #6: HTMX `outerHTML` Swap

When dynamically updating a UI element like a button, **`hx-swap` must be `outerHTML`**. Using `innerHTML` will result in nested, broken elements.

```python
# In a <select> tag that updates a button:
hx_target='#submit-button',
hx_swap='outerHTML' # This replaces the button, it does not fill it.
```
