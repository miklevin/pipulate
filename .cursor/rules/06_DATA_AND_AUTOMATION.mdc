---
description: 
globs: 
alwaysApply: false
---
# Data Persistence and Automation

This guide covers how Pipulate handles database operations and browser automation.

---

## 1. Data Persistence


All data is stored in a single SQLite file (`data/data.db`).

### Data Access Layers

1. **MiniDataAPI (Structured Tables)**:
   - Used for tables with a defined schema (e.g., `profiles`).
   - Provides objects like `profiles()` to fetch all, `profiles.insert()`, `profiles.update()`, etc.
   - Primarily used by `BaseCrud` for CRUD apps.

2. **`DictLikeDB` (Key-Value Store)**:
   - A Python dictionary-like wrapper around the `store` table.
   - Accessed via the `db` object.
   - Used for global UI state like `db['last_app_choice']`.
   - `db['my_key'] = 'value'`, `value = db.get('my_key')`.

3. **`pipeline` Table (Workflow State)**:
   - Stores the state of each workflow run as a JSON blob.
   - Accessed via `Pipulate` helper methods: `pipulate.read_state()`, `pipulate.write_state()`, `pipulate.set_step_data()`.

### File Operations

- **Uploads**: Forms must use `enctype="multipart/form-data"`. In the handler, access files via `form_data = await request.form()` and `file_list = form_data.getlist("input_name")`.
- **Downloads**: Conventionally, save all generated files to the `downloads/` directory.
- **CRITICAL: `APP_NAME` Namespace**: All download paths **MUST** be namespaced with the workflow's `APP_NAME` to prevent collisions.
  - **✅ CORRECT:** `downloads/{self.APP_NAME}/data/output.csv`
  - **❌ WRONG:** `downloads/data/output.csv`

---

## 2. Browser Automation with Selenium


Pipulate supports Selenium for automating browser interactions.

- **Dependencies**: `chromedriver` and `chromium` are provided by the Nix environment.
- **Driver Setup**: The `440_browser_automation.py` plugin demonstrates the cross-platform setup for initializing the `webdriver`.
- **Cleanup**: **Always** use a `try...finally` block to ensure `driver.quit()` is called to free up resources.
  ```python
  driver = webdriver.Chrome(...)
  try:
      driver.get("https://example.com")
      # ... perform actions ...
  finally:
      driver.quit()
  ```
- **Asynchronous Usage**: Selenium operations are blocking. To use them in an `async` function without blocking the event loop, wrap calls in `asyncio.to_thread`.
  ```python
  import asyncio
  await asyncio.to_thread(driver.get, "https://example.com")
  title = await asyncio.to_thread(lambda: driver.title)
  ```
