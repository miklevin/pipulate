---
---

## description: Key aspects of server.py relevant for AI-assisted development, including app setup, routing, and core global instances. globs: ["server.py"] alwaysApply: false

# `server.py` Overview for AI Assistants

## 1\. Application Setup (`fast_app`)

  * `app, rt, (store, Store), (profiles, Profile), (pipeline, Pipeline) = fast_app(...)`
      * `app`: The main FastHTML/Starlette application instance.
      * `rt`: The route decorator (e.g., `@rt('/path')`).
      * `(store, Store)` etc.: Tuples for MiniDataAPI table objects and their corresponding dataclasses. `store` is the table object for the key-value store, `pipeline` for workflow state.
  * Database schema for `store`, `profile`, `pipeline` is defined here.
  * Default HTML headers (`hdrs`) including CSS and JS are set up.

## 2\. Core Global Instances

These are created in `server.py` and often passed to or used by plugins:

  * `logger`: Loguru instance for logging.
  * `db`: `DictLikeDB` instance wrapping the `store` table (global key-value).
  * `pipulate`: Instance of the `Pipulate` class, providing helper methods for workflows (state management, UI components, LLM stream).
  * `chat`: Instance of the `Chat` class, managing WebSocket connections for LLM chat.
  * `profile_app`: Instance of `ProfileApp` (a `BaseCrud` subclass) for managing profiles.
  * `plugin_instances`: A dictionary storing instantiated plugin objects, keyed by their `module_name` (derived from filename).

## 3\. Routing

  * Static routes for core functionalities (e.g., `/`, `/sse`, `/chat`, `/poke`, `/select_profile`, `/clear-pipeline`).
  * Dynamic routes for plugins:
      * Workflows register their own routes in their `__init__` using the `rt` decorator. Landing pages typically use filename-derived paths, while internal steps use `APP_NAME`-prefixed paths.
      * `ProfileApp` (and other CRUD apps) register routes for insert, update, delete, toggle, sort.
  * A catch-all route `/{path:path}` maps to `home(request)` to handle plugin landing pages.

## 4\. Middleware (`DOMSkeletonMiddleware`)

  * Logs incoming requests.
  * Optionally prints `db` (cookie) and `pipeline` state tables to console if `STATE_TABLES = True` (for debugging).

## 5\. Plugin Discovery and Instantiation

  * `discover_plugin_files()`: Scans `plugins/` directory for `.py` files.
  * `find_plugin_classes()`: Inspects discovered modules for classes that look like plugins (e.g., have a `landing` method and `APP_NAME`/`DISPLAY_NAME`).
  * Found plugin classes are instantiated (passing `app`, `pipulate`, `pipeline`, `db`) and stored in `plugin_instances`.

## 6\. Main Execution (`if __name__ == "__main__":`)

  * `run_server_with_watchdog()`:
      * Sets up Loguru and Uvicorn logging levels based on `DEBUG_MODE`.
      * Starts a `watchdog` observer to monitor `.py` file changes and trigger `restart_server()` if syntax is valid.
      * Runs the Uvicorn server for the `app`.
  * `restart_server()`: Called by watchdog. Checks syntax of `server.py`, then uses `os.execv` to restart the Python process.

## 7\. Key Settings & Constants (Top of `server.py`)

  * `DEBUG_MODE`: Toggles verbose logging.
  * `STATE_TABLES`: Toggles console printing of DB state.
  * `APP_NAME`: Default application name (can be overridden by `app_name.txt`).
  * `MODEL`: Default Ollama model.
  * `DB_FILENAME`: Path to SQLite database (dynamic based on environment).
  * `DEVELOPER_PLUGIN_THRESHOLD`: Numeric prefix for classifying plugins as "developer" plugins.

## When AI Might Modify `server.py` (Caution Advised)

  * Adding new global middleware.
  * Changing `fast_app` default headers or adding new core tables.
  * Modifying the plugin discovery/loading mechanism (rare).
  * Adjusting Uvicorn or Watchdog settings.
  * Altering core `Pipulate` or `Chat` class methods.
    *Most plugin-specific logic should be within the plugin files themselves.*
