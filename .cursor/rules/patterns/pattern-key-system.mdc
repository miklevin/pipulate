---
description: 
globs: 
alwaysApply: false
---
---
description: Pattern for implementing key-based systems in Pipulate workflows, including key management and validation
globs: ["pipulate/plugins/*.py"]
alwaysApply: false
---

# Key System Pattern Guide

## Overview
The key system in Pipulate uses a composite key structure that combines profile, app, and number identifiers. This pattern ensures unique identification while maintaining flexibility and resumability.

## Key Structure
- Format: `{profile}-{app}-{number}`
- Example: `default-open_url-001`

## Components
1. **Profile**: Usually "default" unless explicitly changed
2. **App**: Matches the APP_NAME from the plugin (NOT the filename)
3. **Number**: Auto-incrementing identifier, padded to 3 digits

## Key Generation Rules
- Keys are auto-generated when not provided
- Numbers auto-increment within their profile-app scope
- Leading zeros are preserved in the number component
- Existing keys can be resumed by providing the full key

## Automatic Key Generation
Keys are automatically generated in two scenarios:

1. **New Endpoint Access**:
   - First access through dropdown menu
   - Direct URL navigation
   - Redirect to new plugin
   - No user action required
   - Fresh key generated automatically

2. **Mid-Workflow Reset**:
   - Clear current key with "x"
   - Press Enter twice
   - Only needed when starting fresh in same session
   - Explicit user action required

## Usage Guidelines
- Never use the filename as the APP_NAME
- APP_NAME should be snake_case and unique across plugins
- Profile names should be lowercase and use underscores
- Numbers should always be 3 digits (001-999)

## Examples
```python
# Good
APP_NAME = "open_url"          # For 035_url_opener.py
APP_NAME = "param_buster"      # For 040_parameter_buster.py

# Bad
APP_NAME = "035_url_opener"    # Don't use filename!
APP_NAME = "OpenURL"           # Don't use camelCase
```

## Key Resumption
To resume a specific key:
```python
workflow.resume_key("default-open_url-042")
```

## Database Implications
- Keys are used as primary identifiers in the database
- Relationships are maintained through the APP_NAME component
- File renames don't affect existing data relationships
- Profile component enables multi-user/multi-context support

## Best Practices
1. Keep APP_NAME constant once deployed
2. Use descriptive but concise APP_NAMEs
3. Default to "default" profile unless multi-user
4. Let the system auto-generate numbers when possible
5. Document key patterns in plugin headers
6. Use new endpoint access for fresh starts
7. Use mid-workflow reset only when needed

