---
description: 
globs: 
alwaysApply: false
---
# Async Operations and Polling Patterns

## Core Concepts
- **Async Operation**: Start operations that run in the background
- **Polling Pattern**: Check status periodically without blocking the UI
- **Chain Breaking**: Temporarily break the automatic chain reaction during polling
- **Terminal Response**: Provide final results as a terminal response
- **Chain Reaction Preservation**: CRITICAL - Must maintain chain reaction pattern with proper `hx_trigger="load"` attributes

## Implementation Pattern

### 1. Async Operation Setup
```python
async def initiate_operation(self, parameters):
    """Start an asynchronous operation.
    
    Returns a job_id or reference for status checking.
    """
    # Generate unique job ID
    job_id = str(uuid.uuid4())
    
    # Store job state
    if not hasattr(self, 'operation_jobs'):
        self.operation_jobs = {}
    
    # Initialize job state
    self.operation_jobs[job_id] = {
        'progress': 0,
        'status': 'RUNNING',
        'parameters': parameters,
        'result': None,
        'error': None
    }
    
    try:
        # Start async task
        asyncio.create_task(self._process_operation(job_id))
        return job_id
    except Exception as e:
        self.operation_jobs[job_id]['status'] = 'ERROR'
        self.operation_jobs[job_id]['error'] = str(e)
        raise
```

### 2. Status Checking
```python
async def check_operation_status(self, job_id):
    """Check the status of an ongoing operation."""
    if not hasattr(self, 'operation_jobs') or job_id not in self.operation_jobs:
        return {'status': 'ERROR', 'message': 'Job not found'}
    
    job = self.operation_jobs[job_id]
    return {
        'status': job['status'],
        'progress': job['progress'],
        'result': job['result'],
        'error': job.get('error')
    }
```

### 3. Status Handler
```python
async def handle_operation_status(self, request):
    """Handle requests to check operation status."""
    try:
        job_id = request.query_params.get('job_id')
        if not job_id:
            return JSONResponse({
                'status': 'ERROR', 
                'message': 'No job ID provided'
            }, status_code=400)
        
        status = await self.check_operation_status(job_id)
        
        if status['status'] == 'COMPLETED':
            return JSONResponse({
                'status': 'COMPLETED', 
                'result': status['result']
            })
        elif status['status'] == 'RUNNING':
            return JSONResponse({
                'status': 'RUNNING',
                'progress': status['progress'],
                'message': f"Operation {status['progress']}% complete"
            })
        elif status['status'] == 'ERROR':
            return JSONResponse({
                'status': 'ERROR',
                'message': status.get('error', 'Unknown error occurred')
            }, status_code=500)
        else:
            return JSONResponse({
                'status': 'UNKNOWN',
                'message': 'Unknown job status'
            }, status_code=400)
    except Exception as e:
        return JSONResponse({
            'status': 'ERROR',
            'message': f"Error checking status: {str(e)}"
        }, status_code=500)
```

### 4. UI Implementation
```python
# In your step handler:
return Div(
    Card(
        H3(f"{step.show}"),
        P("Operation in progress...", id=f"{step_id}-status"),
        Div(
            "0%",
            id=f"{step_id}-progress",
            style="width: 100%; height: 20px; background: #eee; border-radius: 4px; overflow: hidden;"
        ),
        Div(
            style="width: 0%; height: 100%; background: var(--accent); transition: width 0.3s ease;",
            _=f"on load set my.style.width to '0%' end on htmx:afterRequest set my.style.width to event.detail.xhr.response.progress + '%' end"
        )
    ),
    Div(
        id=next_step_id,
        hx_get=f"/{app_name}/check_operation_status?job_id={job_id}",
        hx_trigger="load, every 2s",
        hx_swap="outerHTML"
    ),
    id=step_id,
    role="region",
    aria-live="polite"
)
```

## Critical Patterns

### 1. Chain Reaction Preservation
- Always include the next step div with `hx_trigger="load"`
- Use `hx_swap="outerHTML"` for status updates
- Maintain proper state management during polling

### 2. Error Handling
- Handle network failures
- Manage operation errors
- Clean up incomplete operations
- Provide clear error messages
- Allow retry mechanisms

### 3. Mobile Responsiveness
- Use appropriate touch target sizes (min 44px)
- Ensure buttons are easily tappable
- Handle progress display on small screens
- Consider operation size limitations
- Use responsive layout patterns

### 4. Accessibility Features
- ARIA labels and descriptions
- Keyboard navigation support
- Screen reader compatibility
- Progress announcements
- Focus management
- Color contrast compliance

## Common Pitfalls
1. **Chain Breaking**: Don't remove the chain reaction div with next_step_id
2. **Error Handling**: Don't forget to handle operation errors
3. **Status Codes**: Use proper error status codes
4. **Cleanup**: Always clean up temporary resources
5. **Mobile**: Handle mobile touch targets properly
6. **Accessibility**: Include proper ARIA attributes
7. **Keyboard**: Handle keyboard navigation
8. **Announcements**: Consider screen reader announcements

## Best Practices
1. **State Management**
   - Use unique job IDs
   - Track operation progress
   - Handle error states
   - Clean up resources

2. **UI Construction**
   - Show clear progress
   - Provide status updates
   - Handle errors gracefully
   - Support mobile devices

3. **Error Recovery**
   - Handle network failures
   - Manage operation errors
   - Clean up incomplete operations
   - Provide clear error messages
   - Allow retry mechanisms

4. **Accessibility**
   - Use ARIA attributes
   - Support keyboard navigation
   - Announce progress
   - Maintain focus
   - Ensure color contrast

## Related Patterns
- See: pattern-chain-reaction.mdc
- See: pattern-widget-implementation.mdc
- See: pattern-atomic-steps.mdc
