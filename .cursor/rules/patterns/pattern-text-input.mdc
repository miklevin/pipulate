---
description: 
globs: 
alwaysApply: false
---
# Text Input Pattern

## Core Concepts
- **Text Input**: Single-line text entry
- **Text Area**: Multi-line text entry
- **Validation**: Input validation and sanitization
- **State Management**: Text input state handling
- **UI Feedback**: Input validation feedback

## Implementation Pattern

### 1. Basic Text Input
```python
class TextInputWidget:
    def __init__(self):
        self.value = ""
        self.error = None
        self.is_valid = True

    def render(self):
        return html.Div([
            html.Input(
                type="text",
                value=self.value,
                onChange=self.handle_change,
                className="form-control"
            ),
            html.Div(
                self.error,
                className="text-danger" if self.error else "d-none"
            )
        ])

    def handle_change(self, event):
        self.value = event.target.value
        self.validate()
        self.update_ui()
```

### 2. Text Area
```python
class TextAreaWidget:
    def __init__(self):
        self.value = ""
        self.error = None
        self.is_valid = True
        self.rows = 3

    def render(self):
        return html.Div([
            html.Textarea(
                value=self.value,
                onChange=self.handle_change,
                rows=self.rows,
                className="form-control"
            ),
            html.Div(
                self.error,
                className="text-danger" if self.error else "d-none"
            )
        ])

    def handle_change(self, event):
        self.value = event.target.value
        self.validate()
        self.update_ui()
```

## Critical Patterns

### 1. Input Validation
- Validate on change
- Validate on blur
- Show validation errors
- Clear errors on valid input
- Support custom validation rules

### 2. State Management
- Track input value
- Track validation state
- Track error messages
- Update UI on state change
- Preserve state across renders

### 3. UI Feedback
- Show validation errors
- Show success state
- Show loading state
- Show character count
- Show required indicator

### 4. Accessibility
- Label inputs properly
- Describe validation errors
- Support keyboard navigation
- Support screen readers
- Follow ARIA guidelines

## Common Pitfalls
1. **Validation Timing**: Don't validate too early
2. **Error Messages**: Don't show errors before user interaction
3. **State Updates**: Don't lose state on re-render
4. **Accessibility**: Don't forget ARIA attributes
5. **Mobile Support**: Don't ignore mobile input types
6. **Performance**: Don't validate on every keystroke
7. **Security**: Don't trust input without validation
8. **UX**: Don't show too many errors at once

## Best Practices
1. **Input Handling**
   - Validate on blur
   - Show clear error messages
   - Support keyboard navigation
   - Handle all input types
   - Sanitize input

2. **State Management**
   - Track input value
   - Track validation state
   - Track error messages
   - Update UI efficiently
   - Preserve state

3. **Error Handling**
   - Show clear errors
   - Clear errors on valid input
   - Support custom validation
   - Handle all error cases
   - Provide recovery options

4. **Accessibility**
   - Use proper labels
   - Support screen readers
   - Follow ARIA guidelines
   - Support keyboard navigation
   - Provide clear feedback

## Related Patterns
- See: pattern-widget-implementation.mdc
- See: pattern-chain-reaction.mdc
- See: pattern-validation.mdc
