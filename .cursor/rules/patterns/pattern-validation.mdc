---
description: 
globs: 
alwaysApply: false
---
# Validation Pattern

## Core Concepts
- **Input Validation**: Validate user input
- **Form Validation**: Validate form submissions
- **Error Handling**: Handle validation errors
- **State Management**: Track validation state
- **UI Feedback**: Show validation feedback

## Implementation Pattern

### 1. Input Validation
```python
class InputValidator:
    def __init__(self):
        self.rules = {}
        self.errors = {}
        self.is_valid = True

    def add_rule(self, field, rule):
        """Add a validation rule for a field."""
        if field not in self.rules:
            self.rules[field] = []
        self.rules[field].append(rule)

    def validate(self, field, value):
        """Validate a field value against its rules."""
        if field not in self.rules:
            return True

        for rule in self.rules[field]:
            if not rule(value):
                self.errors[field] = rule.error_message
                return False

        self.errors.pop(field, None)
        return True

    def get_errors(self):
        """Get all validation errors."""
        return self.errors
```

### 2. Form Validation
```python
class FormValidator:
    def __init__(self):
        self.validator = InputValidator()
        self.form_data = {}
        self.is_valid = True

    def validate_form(self):
        """Validate all form fields."""
        self.is_valid = True
        for field, value in self.form_data.items():
            if not self.validator.validate(field, value):
                self.is_valid = False
        return self.is_valid

    def get_form_errors(self):
        """Get all form validation errors."""
        return self.validator.get_errors()
```

## Critical Patterns

### 1. Validation Rules
- Required field validation
- Type validation
- Range validation
- Pattern validation
- Custom validation rules

### 2. Error Handling
- Clear error messages
- Error state management
- Error recovery
- Error prevention
- Error reporting

### 3. State Management
- Track validation state
- Track error messages
- Update UI on state change
- Preserve state across renders
- Handle async validation

### 4. UI Feedback
- Show validation errors
- Show success state
- Show loading state
- Show validation progress
- Show recovery options

## Common Pitfalls
1. **Validation Timing**: Don't validate too early
2. **Error Messages**: Don't show errors before user interaction
3. **State Updates**: Don't lose state on re-render
4. **Accessibility**: Don't forget ARIA attributes
5. **Performance**: Don't validate on every keystroke
6. **Security**: Don't trust input without validation
7. **UX**: Don't show too many errors at once
8. **Async**: Don't forget async validation

## Best Practices
1. **Validation Rules**
   - Define clear rules
   - Support custom rules
   - Handle all cases
   - Provide clear messages
   - Support async validation

2. **Error Handling**
   - Show clear errors
   - Clear errors on valid input
   - Support error recovery
   - Handle all error cases
   - Provide recovery options

3. **State Management**
   - Track validation state
   - Track error messages
   - Update UI efficiently
   - Preserve state
   - Handle async state

4. **UI Feedback**
   - Show clear feedback
   - Support loading states
   - Show validation progress
   - Provide recovery options
   - Follow accessibility guidelines

## Related Patterns
- See: pattern-text-input.mdc
- See: pattern-widget-implementation.mdc
- See: pattern-chain-reaction.mdc
