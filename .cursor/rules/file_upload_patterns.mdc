---
description: 
globs: 
alwaysApply: false
---
# File Upload Implementation Patterns

This guide documents the patterns and best practices for implementing file upload functionality in Pipulate workflows.

## Overview

File uploads in Pipulate follow a "human-in-the-loop" approach, where users select files from their system and upload them into the workflow. This pattern is demonstrated in the Widget Designer workflow (`[505_widget_designer.py](mdc:pipulate/plugins/505_widget_designer.py)`).

## Implementation Components

1. **Form Structure**
   ```python
   Form(
       Input(
           type="file",
           name="uploaded_files",
           multiple="true",
           required="true",
           cls="contrast"
       ),
       Button("Upload Files ▸", type="submit", cls="primary"),
       hx_post=f"/{app_name}/{step_id}_submit",
       hx_target=f"#{step_id}",
       enctype="multipart/form-data"
   )
   ```

2. **File Processing**
   ```python
   form_data = await request.form()
   uploaded_files = form_data.getlist("uploaded_files")
   ```

3. **Directory Structure**
   ```python
   save_directory = Path("downloads") / self.app_name / pipeline_id
   save_directory.mkdir(parents=True, exist_ok=True)
   ```

## Best Practices

1. **File Handling**
   - Use `pathlib.Path` for robust path manipulation
   - Create unique directories per workflow run
   - Handle file reading/writing in try-except blocks
   - Reset file pointers after reading

2. **User Feedback**
   - Show file names and sizes before saving
   - Display save locations after successful upload
   - Provide clear error messages
   - Include total file count and size

3. **State Management**
   - Store file information in workflow state
   - Include save paths in state for reference
   - Maintain proper workflow progression
   - Allow reverting to re-upload if needed

4. **Error Handling**
   - Check for empty file selection
   - Handle directory creation errors
   - Handle file saving errors
   - Log errors with context

## File Storage Pattern

Files are stored in a structured directory hierarchy:
```
downloads/
  └── APP_NAME/
      └── PIPELINE_ID/
          └── uploaded_files
```

This structure:
- Keeps files organized by workflow
- Prevents collisions between runs
- Makes file management clear
- Supports multiple uploads

## Integration Steps

To add file upload to a workflow:

1. Copy the form structure from the Widget Designer
2. Update the `APP_NAME` and other identifiers
3. Implement the file processing logic
4. Add proper error handling
5. Include user feedback
6. Test thoroughly

## Example Usage

The multi-file upload widget demonstrates:
- Multiple file selection
- File information display
- Structured file storage
- Error handling
- User feedback
- Workflow integration
