---
description: 
globs: 
alwaysApply: false
---
# UI & Frontend: Semantic Excellence & Accessibility

This guide covers Pipulate's approach to **semantic HTML**, **accessible design**, and **justified styling choices** for maintainable, inclusive user interfaces.

---

## 1. Core UI Philosophy: Semantic-First Design

### **Server-Rendered Semantic HTML**
- **FastHTML generates semantic HTML directly from Python** - No template abstraction layer
- **Every element has semantic meaning** - `H3` for step titles, `P` for explanations, `Button` for actions
- **Structure reflects content hierarchy** - Visual design follows semantic importance

### **Progressive Enhancement via HTMX**
- **HTML-first approach** - All functionality works without JavaScript
- **HTMX for interaction enhancement** - Dynamic behavior layered on semantic foundation
- **Graceful degradation** - Core functionality preserved if HTMX fails

### **PicoCSS Semantic Foundation**
- **Classless styling philosophy** - HTML elements styled by default based on semantic meaning
- **CSS classes for exceptions only** - Override default styling when needed
- **Accessibility baked in** - Focus states, keyboard navigation, screen reader support

---

## 2. The Great Style System Migration: Semantic Justification

### **From Inline Styles to CSS Classes: The Why**
**Previous Pattern** (deprecated):
```python
P("Error message", style=pip.get_style('error'))  # ‚ùå Coupling presentation to logic
```

**Current Pattern** (semantic):
```python
P("Error message", cls='text-invalid')  # ‚úÖ Semantic meaning expressed via class
```

### **Semantic Class Mapping**
- **`text-invalid`**: Content that represents errors or invalid states
- **`text-secondary`**: Supporting information, explanations, help text
- **`text-success`**: Positive feedback, successful operations
- **`text-warning`**: Cautionary information, non-critical alerts

### **The Accessibility Advantage**
- **Screen readers understand semantic context** - "invalid" vs "secondary" has meaning
- **CSS can enhance without breaking semantics** - Visual styling separate from structure
- **Consistent interaction patterns** - Same class = same keyboard/mouse behavior

---

## 3. CSS Styling Hierarchy: Semantic Justification

**Follow this strict hierarchy for maintainable, accessible design:**

### **1. First Priority: PicoCSS Semantic Classes**
```python
Button("Save", cls='primary')     # ‚úÖ Semantic importance
Button("Cancel", cls='secondary') # ‚úÖ Semantic hierarchy
Card(H3("Title"), P("Content"))  # ‚úÖ Semantic structure
```

### **2. Second Priority: Pipulate Utility Classes**
```python
Div(cls='text-secondary')    # ‚úÖ Semantic content classification
Div(cls='mt-4')             # ‚úÖ Consistent spacing system
Div(cls='container')        # ‚úÖ Layout structure
```

### **3. Last Resort: Centralized Custom Styles**
```python
# ‚úÖ PREFERRED - Centralized, named constants
UI_CONSTANTS = {
    "COLORS": {
        "HEADER_TEXT": "#2c3e50",
        "SUCCESS_BORDER": "#27ae60"
    },
    "SPACING": {
        "STEP_PADDING": "1vh 0px 0px .5vw"
    }
}

# Use with semantic context
H3("Step Title", style=f'color: {UI_CONSTANTS["COLORS"]["HEADER_TEXT"]};')
```

---

## 4. HTMX Patterns: Semantic Interaction Design

### **Dynamic Button Text: Semantic State Representation**
**The Pattern**: Button text changes based on context (e.g., "Generate" ‚Üí "Download Cached")

**Semantic Implementation**:
```python
# Form provides semantic context
Form(
    Select(options, hx_post=f'/{app_name}/update_button_text',
           hx_target='#submit-button',
           hx_trigger='change',
           hx_include='closest form'),
    Button("Process Data", id='submit-button', cls='primary'),
    # Hidden context for semantic meaning
    Input(type='hidden', name='username', value=username),
    Input(type='hidden', name='project_name', value=project_name)
)
```

**Critical Semantic Requirements**:
- **`hx_swap='outerHTML'`** - Preserves button element semantics
- **Consistent `id='submit-button'`** - Maintains element identity for screen readers
- **Semantic button text** - "Download Existing File" vs "Process New Data"

### **Profile/CRUD Toggle: Semantic State Changes**
```python
Input(
    type='checkbox',
    checked=item.active,
    hx_post=toggle_url,
    hx_target=f'#{dom_id_for_the_item_row}',
    hx_swap='outerHTML',
    aria_label=f'Toggle {item.name} active state'  # ‚úÖ Screen reader context
)
```

### **Form Reset with Accessibility**
```python
Form(
    # ... semantic form fields ...
    hx_post=f'/endpoint',
    hx_target='#item-list',
    hx_swap='beforeend',
    _hx_on_htmx_after_request=(
        "this.reset(); "
        "this.querySelector('input[name=field_to_focus]').focus(); "
        "this.querySelector('input[name=field_to_focus]').setAttribute('aria-describedby', 'success-message');"
    )
)
```

---

## 5. Accessibility-First Patterns

### **ARIA Labels and Descriptions**
```python
# ‚úÖ Semantic form with accessibility
Form(
    H3("Step Configuration", id="form-title"),
    P("Enter your configuration details", id="form-instructions", cls='text-secondary'),
    Input(
        type='text',
        name='config_value',
        aria_labelledby='form-title',
        aria_describedby='form-instructions',
        required=True
    ),
    Button("Submit", cls='primary')
)
```

### **Focus Management**
```python
# ‚úÖ Semantic focus flow
Input(
    autofocus=True,  # First field gets focus
    _onfocus='this.setSelectionRange(this.value.length, this.value.length)',  # Cursor to end
    aria_required='true'  # Semantic requirement indication
)
```

### **Error State Semantics**
```python
# ‚úÖ Semantic error communication
Div(
    P("Error: Invalid input detected", cls='text-invalid', role='alert'),
    P("Please enter a valid project name", cls='text-secondary'),
    aria_live='polite'  # Screen reader announcements
)
```

---

## 6. File System Integration: Semantic Actions

### **Opening Local Folders with Context**
```python
import urllib
from pathlib import Path

# ‚úÖ Semantic action with clear purpose
folder_path = str(Path("downloads").absolute())
encoded_path = urllib.parse.quote(folder_path)

Button(
    "üìÅ Open Downloads Folder",  # ‚úÖ Icon + clear semantic label
    hx_get=f"/open-folder?path={encoded_path}",
    hx_swap="none",
    aria_label=f"Open {folder_path} in file explorer"  # ‚úÖ Screen reader context
)
```

---

## 7. The Semantic Advantage: Why This Matters

### **For Users**
- **Predictable interaction patterns** - Same semantics = same behavior
- **Keyboard navigation works everywhere** - Proper focus flow and ARIA support
- **Screen reader compatibility** - Semantic HTML communicates structure and meaning

### **For Developers**  
- **Self-documenting code** - Semantic classes explain intent
- **Consistent styling** - Same semantic meaning = same visual treatment
- **Maintainable CSS** - Changes to semantic classes affect all similar elements

### **For AI Assistants**
- **Semantic understanding** - AI can infer meaning from class names and structure
- **Pattern recognition** - Consistent semantic patterns enable better code generation
- **Accessibility compliance** - AI suggestions follow semantic accessibility patterns

**Semantic HTML isn't just good practice - it's the foundation of maintainable, accessible, AI-collaborative interfaces.**
