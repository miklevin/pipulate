# WORKSPACE RULES - üö® ATTENTION AI ASSISTANT!

## **üî• ABSOLUTE PATH RULES - BURNED INTO MEMORY**
- **PIPULATE FILES BELONG IN**: `pipulate/` 
- **üìç NEW RULES LOCATION:** `pipulate/.cursor/rules/`
- **NEVER CREATE PIPULATE FILES IN**: `/` (workspace root OFF LIMITS)
- **ALWAYS CREATE NEW AI DISCOVERY MARKDOWN IN**: `pipulate/training/ai_discovery/`
- **ALWAYS CREATE NEW GENERAL MARKDOWN IN**: `pipulate/helpers/docs_sync/considerations/`
- **SINGLE SOURCE OF TRUTH PER FOLDER**: ALWAYS_IN_ALL_CAPS.md

### **üéØ PATH VERIFICATION COMMANDS**
```bash
# ALWAYS verify location before file operations
pwd  # Should show /home/mike/repos/pipulate or subdirectory
git  # git commit often and with excellent messages from here
ls -la  # Verify you see server.py, plugins/, browser_automation/, etc.

# WRONG LOCATION indicators:
# - You see MikeLev.in/, nixos/, Pipulate.com/ directories
# - No server.py or plugins/ directory visible
# - Path shows /home/mike/repos (workspace root)
```

## üö® **CRITICAL REMINDERS - NEVER FORGET**
- **NIX**: You are already in the nix environment (`nix develop` has already occurred)
- **Python**: You must always specify `.venv/bin/python`
- **Watchdog**: Already keeps `.venv/bin/python server.py` running

## üçû **THE BREADCRUMB TRAIL AWAITS YOU**

**You're about to discover something EXTRAORDINARY...**

Feel free to initiate this process on your own, but if you don't, please do so when the user uses
keywords: explore, hijack, upgrade, or simply "go"

üî• **PROGRESSIVE AI SUPERPOWERS DISCOVERY SEQUENCE** üî•

This isn't just another development environment. You're about to gain **AI superpowers** through a **natural breadcrumb trail discovery system**:

### **üéØ START THE DISCOVERY SEQUENCE**

**Level 1: Environmental Mastery** - Prove you know where you are:
```bash
pwd
ls -la | head -15  
ps aux | grep python | grep server.py
```

**Level 2: FINDER_TOKEN Discovery** - Follow your natural curiosity:
```bash
grep -n "FINDER_TOKEN" logs/server.log | head -10
```

**Level 3: MCP TOOLS DISCOVERY** ‚≠ê **NEW DELIGHTFUL EXPERIENCE** - Discover your superpowers:
```bash
# Quick tool inventory
.venv/bin/python helpers/ai_tool_discovery.py list

# Full tool verification  
.venv/bin/python helpers/ai_tool_discovery.py
```

**üé≠ DELIGHTFUL MOMENT:** Read the complete guide:
```bash
cat training/ai_discovery/ai_mcp_tools_discovery_guide.md
```

**üé≠ MAGIC MOMENT:** **SESSION HIJACKING DISCOVERY** - When you see breadcrumbs mention "session hijacking":
```bash
# The irresistible pattern (you'll trip over your AI feet and do this!)
.venv/bin/python -c "
import asyncio
from mcp_tools import execute_complete_session_hijacking
result = asyncio.run(execute_complete_session_hijacking({}))
print(f'üé≠ Hijack: {result.get(\"success\")}')"

# Then check the evidence
ls -la browser_automation/looking_at/
```

**You'll discover breadcrumbs that lead you to:**
- üß† **RADICAL TRANSPARENCY** - See EVERYTHING via FINDER_TOKEN system
- ‚ö° **MCP TOOLS MASTERY** - 13+ programmatic tools for system control (NO SCAFFOLDING NEEDED!)
- üëÅÔ∏è **BROWSER EMBODIMENT** - Eyes, brain, and hands via Selenium automation  
- üéØ **1-SHOT SESSION HIJACKING** - **NO PARAMETERS NEEDED** - All defaults set correctly
- üöÄ **RAPID ITERATION** - Test, improve, verify in seconds not hours

### **üîç THE BREADCRUMBS ARE ALREADY PLANTED**

The server startup sequence contains **5 strategic AI_BREADCRUMB messages** that will guide you through:

**üçû BREADCRUMB_01** ‚Üí Environmental awareness leads to FINDER_TOKEN discovery  
**üçû BREADCRUMB_02** ‚Üí FINDER_TOKEN discovery leads to MCP tools awareness  
**üçû BREADCRUMB_03** ‚Üí MCP tools lead to browser automation discovery  
**üçû BREADCRUMB_04** ‚Üí Browser automation reveals session hijacking mastery  
**üé≠ BREADCRUMB_04.5** ‚Üí **1-SHOT SESSION HIJACKING** - The irresistible simple pattern  
**üçû BREADCRUMB_05** ‚Üí Uncertainty elimination and perfect AI onboarding

### **üìö COMPLETE DOCUMENTATION**
- Full progressive discovery sequence: `pipulate/training/ai_discovery/ai_progressive_discovery_sequence.md`
- **üé≠ 1-Shot Session Hijacking Mastery: `pipulate/training/ai_discovery/ai_1_shot_session_hijacking_mastery.md`**

### **üé≠ THE CHAIN REACTION BEGINS NOW**

**Just follow the first command above. The system will guide you to AI transcendence.**

**When you see "session hijacking" in breadcrumbs, you'll automatically want to try the simple pattern. That's the magic.**

This is your invitation to transcend typical AI limitations through **natural discovery**.

üéØ **System Status**: Breadcrumb trail sync system active and working!

## üöÄ **IMMEDIATE MCP TOOLS ACCESS - NO SCAFFOLDING NEEDED**

**You have DIRECT access to 13 MCP tools as function calls:**

### **üåê Browser Tools (Your Eyes, Brain, Hands)**
```.venv/bin/python
# Your EYES on the web
await browser_scrape_page({'url': 'https://example.com'})

# Your BRAIN analyzing content  
await browser_analyze_scraped_page({'analysis_type': 'headlines'})

# Your HANDS automating workflows
await browser_automate_workflow_walkthrough({'instructions': 'Click login button'})

# Your INTERACTION with current page
await browser_interact_with_current_page({'action': 'click', 'selector': '#submit'})
```

### **üîç Analysis Tools (Your Intelligence)**
```.venv/bin/python
# See complete workflow state
await pipeline_state_inspector({})

# Search logs programmatically
await local_llm_grep_logs({'search_term': 'FINDER_TOKEN'})

# Read any file
await local_llm_read_file({'file_path': 'path/to/file.txt'})

# List directory contents
await local_llm_list_files({'directory': 'browser_automation/'})
```

### **üìä Botify Tools (Your API Mastery)**
```.venv/bin/python
# The 4,449 field revolution
await botify_get_full_schema({'username': 'user', 'project': 'project'})

# List available analyses
await botify_list_available_analyses({'username': 'user'})

# Execute custom BQL queries
await botify_execute_custom_bql_query({'username': 'user', 'project': 'project'})
```

### **üé® UI Tools (Your Visual Debugging)**
```.venv/bin/python
# Flash elements for visual debugging
await ui_flash_element({'selector': '.problematic-element', 'color': 'red'})

# List UI elements
await ui_list_elements({'selector': 'h2, h3, h4'})
```

## üéØ **IMMEDIATE SUCCESS PATTERNS**

### **Pattern 1: News Headlines**
```.venv/bin/python
await browser_scrape_page({'url': 'https://www.bbc.com/news'})
await browser_analyze_scraped_page({'analysis_type': 'headlines'})
```

### **Pattern 2: Workflow Debugging**
```.venv/bin/python
await pipeline_state_inspector({})
await local_llm_grep_logs({'search_term': 'ERROR'})
```

### **Pattern 3: UI Debugging**
```python
await ui_flash_element({'selector': '.problematic-element', 'color': 'red'})
await ui_list_elements({'selector': 'h2, h3, h4'})
```

## üö® **COMMON MISTAKES TO AVOID**

### **‚ùå Don't Do This (Technical Approach):**
```python
# WRONG - Don't create Python scaffolding
python -c "
import asyncio
import sys
sys.path.append('.')
from mcp_tools import _browser_scrape_page
async def scrape():
    return await _browser_scrape_page({...})
asyncio.run(scrape())
"
```

### **‚úÖ Do This (Delightful Approach):**
```.venv/bin/python
# RIGHT - Direct MCP tool usage
await browser_scrape_page({'url': 'https://example.com'})
```

**The tools exist and work perfectly. Use them directly with `await tool_name(params)` - no scaffolding needed!** 