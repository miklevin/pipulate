---
description: 
globs: 
alwaysApply: false
---
---
description: Core patterns for browser automation in Pipulate workflows, including cross-platform support, Chrome options, and error handling
globs: ["pipulate/plugins/*.py"]
alwaysApply: false
---
# Browser Automation Pattern

## Overview
This guide covers the implementation of browser automation in Pipulate workflows, as demonstrated in [550_browser_automation.py](mdc:pipulate/plugins/550_browser_automation.py).

## Core Components

### 1. Cross-Platform Support
```python
# Platform detection
effective_os = os.environ.get("EFFECTIVE_OS", "unknown")

# Driver initialization
if effective_os == "darwin":
    service = Service(ChromeDriverManager().install())
else:
    service = Service()
```

### 2. Chrome Options Configuration
```python
chrome_options = Options()
chrome_options.add_argument("--no-sandbox")
chrome_options.add_argument("--disable-dev-shm-usage")
chrome_options.add_argument("--new-window")
chrome_options.add_argument("--start-maximized")
```

## Implementation Patterns

### 1. URL Opening Pattern
```python
# Initialize driver
driver = webdriver.Chrome(service=service, options=chrome_options)

# Open URL
driver.get(url)

# Wait for load
await asyncio.sleep(2)

# Verify load
title = driver.title

# Cleanup
driver.quit()
```

### 2. Error Handling Pattern
```python
try:
    # Browser operations
except Exception as e:
    error_msg = f"Error: {str(e)}"
    logger.error(error_msg)
    await self.message_queue.add(pip, error_msg, verbatim=True)
    return P(error_msg, style=pip.get_style("error"))
```

## Best Practices

1. **Resource Management**
   - Always close browser in finally block
   - Clean up temporary files
   - Handle cleanup errors
   - Monitor resource usage

2. **Error Handling**
   - Log detailed error messages
   - Provide user-friendly error display
   - Handle platform-specific errors
   - Implement proper cleanup

3. **Platform Support**
   - Handle OS-specific configurations
   - Use appropriate driver management
   - Test cross-platform compatibility
   - Document platform differences

4. **Performance**
   - Optimize page load waits
   - Handle async operations properly
   - Manage resource cleanup
   - Monitor memory usage

## Common Pitfalls

1. **Resource Leaks**
   - Forgetting to close browser
   - Not cleaning up temporary files
   - Leaving zombie processes
   - Memory leaks from unclosed sessions

2. **Timing Issues**
   - Insufficient page load waits
   - Race conditions in async operations
   - Premature cleanup
   - Async operation timing

3. **Platform Differences**
   - Driver path issues
   - Chrome version compatibility
   - OS-specific configurations
   - Permission handling

## Testing Considerations

1. **Basic Testing**
   - URL opening functionality
   - Page load verification
   - Error handling
   - Resource cleanup

2. **Error Scenarios**
   - Network failures
   - Invalid URLs
   - Timeout handling
   - Resource cleanup

3. **Platform Testing**
   - Cross-OS compatibility
   - Driver installation
   - Resource handling
   - Error scenarios

## Related Rules
- [Browser Session Management](mdc:pattern-browser-session.mdc)
- [Chain Reaction Pattern](mdc:pattern-chain-reaction.mdc)
- [Widget Implementation](mdc:pattern-widget-implementation.mdc)
- [Error Handling](mdc:implementation-widget-error.mdc)
