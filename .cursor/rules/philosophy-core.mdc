---
description: 
globs: 
alwaysApply: false
---
# Core Philosophy: The Digital Workbench

Pipulate is not just a web application framework; it's a statement about how modern software tools can be built with clarity, control, and purpose. It represents a deliberate step sideways from conventional web development patterns toward digital self-sufficiency.

## Fundamental Principles

1. **Local-First Reality**
   - Your data lives in SQLite, not a remote cloud
   - Your environment is reproducible via Nix
   - Your LLM runs on your machine via Ollama
   - Control and immediacy over remote abstraction

2. **Modern Webmaster Thinking**
   - One person CAN understand the entire stack
   - Server-side control is a feature, not a limitation
   - Explicit Python over implicit magic
   - See [philosophy-webmaster.mdc](mdc:philosophy-webmaster.mdc)

3. **Selective Complexity**
   - Embrace powerful tools (Nix, Python 3.12, async)
   - Reject accidental complexity
   - Simple state management (DictLikeDB)
   - Minimal but strategic JavaScript

4. **Tool-Centric Design**
   - Build a workbench, not a platform
   - Each workflow is a specialized tool
   - Clarity over abstract reuse
   - See [pattern-wet.mdc](mdc:pattern-wet.mdc)

## Technical Foundations

1. **Server Authority**
   - Server is the source of truth
   - For both data AND UI
   - FastHTML for explicit rendering
   - HTMX for controlled interactivity

2. **State Management**
   - SQLite as the single source
   - DictLikeDB for UI state
   - Server-side filtering
   - Observable data flow

3. **UI Philosophy**
   - HTML over JavaScript
   - HTMX over SPA frameworks
   - Explicit chain reactions
   - See [pattern-chain-reaction.mdc](mdc:pattern-chain-reaction.mdc)

## Core Patterns

1. **WET Workflows**
   - Write Everything Twice for clarity
   - Self-contained automation scripts
   - Explicit over DRY
   - Tool-specific logic

2. **DRY Infrastructure**
   - Base classes for CRUD
   - Core Pipulate helpers
   - UI rendering functions
   - Reuse where appropriate

3. **Controlled Interaction**
   - HTMX for declarative updates
   - Minimal custom JavaScript
   - Explicit state transitions
   - Predictable behavior

## Implementation Philosophy

When implementing new features in Pipulate:

1. **Leverage Existing Patterns**
   - Use established structures
   - Extend don't replace
   - Keep state server-side
   - Follow explicit patterns

2. **Maintain Simplicity**
   - One person should understand it
   - Avoid client-side state
   - Use simple flags over complex logic
   - Keep tools focused

3. **Preserve Observability**
   - All state in SQLite
   - Clear data flow
   - Traceable logic
   - Easy debugging

## The Path Forward

Pipulate represents a specific vision of software development:
- Individual empowerment over enterprise scale
- Direct control over cloud abstraction
- Tool clarity over framework flexibility
- Simplicity over feature creep

This isn't about building the next global SaaS platform. It's about crafting a personal or small-team workbench where every tool is sharp, every action is intentional, and every state is observable.

See also:
- [philosophy-simplicity.mdc](mdc:philosophy-simplicity.mdc)
- [philosophy-webmaster.mdc](mdc:philosophy-webmaster.mdc)
- [architecture-core.mdc](mdc:architecture-core.mdc)
