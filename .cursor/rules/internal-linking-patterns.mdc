---
description: 
globs: 
alwaysApply: false
---
# Internal Linking & Redirect System

## Overview
Pipulate uses a sophisticated redirect system to enable cross-plugin navigation while maintaining endpoint messaging and real-time conversation history injection for LLM training.

## Redirect Endpoint Architecture

### Core Mechanism
Located in [server.py](mdc:server.py), the `/redirect/{path}` endpoint:
1. **Triggers endpoint messaging** via `build_endpoint_messages(path)`
2. **Builds endpoint training** via `build_endpoint_training(path)` 
3. **Sets temp_message** for coordination system activation
4. **Redirects to target** with `Redirect(f'/{path}')`

### Implementation Pattern
```python
@app.route('/redirect/{path}', methods=['GET'])
async def redirect_handler(request):
    path = request.path_params['path']
    
    # Build endpoint messages and training
    endpoint_messages = build_endpoint_messages(path)
    endpoint_training = build_endpoint_training(path)
    
    # Set coordination message
    temp_message = f"User navigating to /{path}"
    
    # Redirect to actual endpoint
    return Redirect(f'/{path}')
```

## When to Use Redirect vs Direct Links

### ✅ Use `/redirect/` for:
- **Cross-plugin navigation** (Roles → Documentation)
- **Main navigation menu items** (radio buttons)
- **Links that should trigger endpoint messaging**
- **Context switching between different app sections**

### ❌ Use direct links for:
- **Internal plugin navigation** (within same plugin)
- **Document-to-document links** (within documentation browser)
- **Page-to-page navigation** (pagination within same document)
- **Static resource links** (CSS, JS, images)

## Examples from Codebase

### Correct Cross-Plugin Linking
```python
# In roles plugin - linking to documentation
A("Developer?", 
  href="/redirect/documentation",
  style="color: var(--pico-primary-color);")
```

### Correct Internal Navigation  
```python
# Within documentation plugin - direct links OK
A("Page 5", href="/docs/botify_api/page/5")
A("Table of Contents", href="/docs/botify_api/toc")
```

### Main Navigation Pattern
```python
# Radio buttons in server.py use redirect
Input(type="radio", name="endpoint", value="documentation",
      hx_post="/redirect/documentation")
```

## Endpoint Messaging System

### Purpose
The redirect system enables:
- **Real-time context injection** for LLM training
- **Conversation history building** as users navigate
- **Endpoint-specific messaging** for each plugin
- **Coordination between plugins** through temp_message

### Training Integration
- Navigation patterns become part of LLM training data
- User journey tracking for behavior analysis  
- Context-aware responses based on current location
- Plugin interaction patterns for system optimization

## Implementation Guidelines

### Adding New Cross-Plugin Links
1. **Identify the target plugin** endpoint name
2. **Use `/redirect/{endpoint}` format** for the href
3. **Maintain consistent styling** with existing links
4. **Test endpoint messaging activation** after implementation

### Link Styling Consistency
```python
# Standard cross-plugin link styling
A("Link Text",
  href="/redirect/target_endpoint", 
  style="color: var(--pico-primary-color); text-decoration: underline;",
  onmouseover="this.style.color = 'var(--pico-primary-hover)';",
  onmouseout="this.style.color = 'var(--pico-primary-color)';")
```

### Testing Redirect Links
1. **Verify redirect occurs** to correct endpoint
2. **Check endpoint messaging activation** in logs
3. **Confirm temp_message setting** for coordination
4. **Test user experience flow** end-to-end

## Common Patterns

### Plugin Discovery Links
- From introduction/roles to specific plugins
- Always use redirect to trigger proper context setting
- Enable endpoint messaging for user guidance

### Documentation Cross-References  
- Links to documentation from other plugins
- Use redirect to activate documentation context
- Provides proper training data for LLM responses

### Navigation Menu Integration
- Radio button navigation uses redirect system
- Maintains consistent user experience
- Enables proper plugin coordination

## Best Practices

### Link Maintenance
- **Audit existing links** when adding new redirect patterns
- **Ensure consistency** across similar navigation patterns  
- **Test redirect chains** don't create loops
- **Verify endpoint messaging** works as expected

### Performance Considerations
- Redirect adds minimal overhead for better UX
- Endpoint messaging provides valuable training data
- Coordination system enables plugin awareness
- User journey tracking improves system intelligence
