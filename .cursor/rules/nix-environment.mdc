---
description: 
globs: 
alwaysApply: false
---
# Nix Environment Guide

Pipulate uses Nix Flakes to provide a consistent, reproducible environment across macOS, Linux, and Windows (via WSL). This guide explains how to work effectively with this environment.

## Basic Commands

### Default Interactive Shell
```bash
cd ~/pipulate
nix develop
```
This does:
1. Updates code via `git pull`
2. Enters the Nix environment
3. Starts JupyterLab and the Pipulate server

### Quiet Shell (For Development/AI)
```bash
cd ~/pipulate
nix develop .#quiet
```
This activates the environment without starting servers, useful for:
- Running specific commands
- Debugging
- Working with AI assistants (avoids verbose output)

### Running Single Commands
```bash
cd ~/pipulate
nix develop .#quiet --command python -c "import pandas; print(pandas.__version__)"
```

## Environment Types

Pipulate provides multiple development environments:

1. **default**: Full environment with auto-start scripts
2. **quiet**: Minimal environment without auto-start
3. **cuda**: With NVIDIA GPU support (if available)
4. **quiet-cuda**: Quiet environment with GPU support

## Package Management

Within the Nix environment, you can install additional Python packages:

```bash
cd ~/pipulate
nix develop .#quiet
pip install new-package
```

For permanent additions, edit:
```bash
vim ~/pipulate/requirements.txt
```
Then rebuild the environment:
```bash
cd ~/pipulate
nix develop .#quiet
```

## Development Patterns

### Standard Development Flow
1. Enter environment: `nix develop`
2. Edit code (Pipulate auto-reloads on changes)
3. Press Ctrl+C to stop the server
4. Run additional commands if needed: `nix develop .#quiet --command ...`

### Working with Jupyter
- JupyterLab runs at `http://localhost:8888`
- Shares the same `.venv` as the server
- Packages installed in Pipulate are available in Jupyter

### Using Local Ollama
Ensure Ollama is running:
```bash
ollama serve
```
Then in a separate terminal:
```bash
ollama pull llama3
```

## Debugging Techniques

### Environment Inspection
```bash
nix develop .#quiet --command env | sort
```

### Python Environment Check
```bash
nix develop .#quiet --command python -c "import sys; print(sys.executable)"
```

### Package Verification
```bash
nix develop .#quiet --command pip freeze
```

### Server Logs
```bash
nix develop .#quiet --command tail -f logs/server.log
```

## CUDA Support

If you have an NVIDIA GPU:

```bash
cd ~/pipulate
nix develop .#cuda
```

To verify CUDA is working:
```bash
nix develop .#quiet-cuda --command python -c "import torch; print(torch.cuda.is_available())"
```

## Troubleshooting

1. **"Command not found"**: Ensure you're in the Nix environment (`nix develop`)
2. **Dependency issues**: Update `requirements.txt`, then reenter the environment
3. **Server won't start**: Check for running instances (`ps aux | grep python`)
4. **JupyterLab issues**: Check for running tmux sessions (`tmux ls`)
5. **Environment errors**: Delete `.venv` and reenter the environment

Always run Pipulate commands from inside the Nix environment. The flake.nix file is the source of truth for all environment configuration.
