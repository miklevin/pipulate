---
description: 
globs: 
alwaysApply: false
---
## description: The critical HTMX Chain Reaction pattern for workflow step progression in Pipulate. This pattern is IMMUTABLE. globs: ["pipulate/plugins/*.py", "server.py"] alwaysApply: true

## description: The critical HTMX Chain Reaction pattern for workflow step progression in Pipulate. This pattern is IMMUTABLE. globs: ["pipulate/plugins/*.py", "server.py"] alwaysApply: true

# The HTMX Chain Reaction Pattern (Immutable)

## 1. Overview

Pipulate workflows emulate a "Run All Cells" experience, similar to Jupyter Notebooks. This is achieved by an HTMX-driven "chain reaction." When a step completes, its response HTML includes a trigger for the next step to load automatically.

**This pattern is critical and must be preserved exactly as implemented.** Modifying or removing `hx_trigger="load"` will break workflow progression.

## 2. The Core Pattern

The fundamental structure returned by a step's GET or POST handler that continues the chain:

```python
# In a step's GET or POST handler (e.g., self.step_01_submit or self.step_01 if showing completed view)
return Div(
    # Content of the CURRENT step (e.g., Card showing completed data or input form)
    Card(H3(f"{step.show}: {current_step_data}")), # Example of completed view

    # CRITICAL: This inner Div triggers loading of the NEXT step.
    # It MUST have hx_trigger="load".
    Div(
        id=next_step_id,  # e.g., "step_02" or "finalize"
        hx_get=f"/{self.APP_NAME}/{next_step_id}",
        hx_trigger="load" # This makes the magic happen. DO NOT REMOVE.
    ),

    id=current_step_id # e.g., "step_01". The hx-target of the form submission.
)
```

## 3. Helper Methods for Chain Reaction

1. **`display_revert_header`**: Creates the standard UI element showing a step's outcome (e.g., `Step Name: Value`) along with a "Revert" button.
   ```python
   header = pip.display_revert_header(
       step_id=step_id,
       app_name=app_name,
       message=f'{step.show}: {value}',
       steps=steps
   )
   ```

2. **`display_revert_widget`**: Used when the step's outcome is a richer visual component (table, diagram, etc.). It renders the same kind of revertible header as `display_revert_header` but also includes a styled container for the passed `widget` content.
   ```python
   widget_display = pip.display_revert_widget(
       step_id=step_id,
       app_name=app_name,
       message='Widget Title',
       widget=my_widget,
       steps=steps
   )
   ```

3. **`chain_reverter`**: A convenience method that combines `display_revert_header` with the next-step trigger `Div`. This is the recommended approach for simple step completions.
   ```python
   return pip.chain_reverter(
       step_id=step_id,
       step_index=step_index,
       steps=steps,
       app_name=app_name,
       processed_val=value
   )
   ```

## 4. When to Use Which Method

- Use `chain_reverter` for simple step completions where the output is a string value
- Use `display_revert_widget` when you need to show complex visual components
- Use `display_revert_header` when you need custom layout around the standard revert header

## 5. Step Handler Patterns

Step handlers are the core components that implement the chain reaction pattern. They manage the state and UI for each step in the workflow.

### 5.1 GET Handler Pattern

The GET handler (`async def step_XX`) is responsible for displaying either:
- The input form for an incomplete step
- The completed view for a finished step

```python
async def step_XX(self, request: Request) -> HTML:
    step_id = "step_XX"
    step_index = X  # The step's index in the workflow
    step = self.steps[step_index]
    
    # Check if step is complete and not being reverted to
    if (step_id in self.completed_steps and 
        not self.is_reverting_to(step_id) and 
        not self.is_finalized):
        # Return completed view with next step trigger
        return pip.chain_reverter(
            step_id=step_id,
            step_index=step_index,
            steps=self.steps,
            app_name=self.APP_NAME,
            processed_val=self.get_step_value(step_id)
        )
    
    # Return input form with empty next step placeholder
    return Div(
        # Input form content
        Card(
            H3(step.show),
            Form(
                # Form fields
                Button("Submit", type="submit"),
                hx_post=f"/{self.APP_NAME}/{step_id}_submit",
                hx_target=f"#{step_id}"
            )
        ),
        # Empty placeholder for next step (NO hx_trigger="load")
        Div(id=f"step_{X+1:02d}"),
        id=step_id
    )
```

### 5.2 POST Handler Pattern

The POST handler (`async def step_XX_submit`) processes the form submission and returns the completed view:

```python
async def step_XX_submit(self, request: Request) -> HTML:
    step_id = "step_XX"
    step_index = X
    
    # Process form data
    form_data = await request.form()
    value = form_data.get("value")
    
    # Save state
    self.save_step_value(step_id, value)
    self.completed_steps.add(step_id)
    
    # Return completed view with next step trigger
    return pip.chain_reverter(
        step_id=step_id,
        step_index=step_index,
        steps=self.steps,
        app_name=self.APP_NAME,
        processed_val=value
    )
```

### 5.3 Common Patterns

1. **Simple Input Step**:
   - Single form field
   - Direct value processing
   - Standard chain reverter response

2. **Complex Input Step**:
   - Multiple form fields
   - Data validation
   - Custom processing logic

3. **Visual Output Step**:
   - Use `display_revert_widget`
   - Include rich visual components
   - Maintain chain reaction

4. **Final Step**:
   - Handle workflow finalization
   - Lock all steps
   - Show completion message

## 6. Workflow Initialization: The `run_all_cells()` Method

**CRITICAL ANTI-PATTERN IDENTIFIED AND ELIMINATED:**

In the past, workflows used verbose manual placeholder creation in `init()` and `handle_revert()` methods:

```python
# ❌ VERBOSE ANTI-PATTERN (eliminated system-wide in commit 3656dba7cb9e032d)
async def init(self, request):
    # Manual placeholder creation
    placeholders = []
    for i, step in enumerate(steps):
        trigger = 'load' if i == 0 else None
        placeholders.append(Div(id=step.id, hx_get=f'/{app_name}/{step.id}', hx_trigger=trigger))
    return Div(*placeholders, id=f'{app_name}-container')

# ❌ EVEN WORSE: Single-step hardcoded patterns
async def init(self, request):
    return Div(Div(id='step_01', hx_get=f'/{app_name}/step_01', hx_trigger='load'), id=f'{app_name}-container')
```

**✅ CORRECT PATTERN: Use `pip.run_all_cells()` method:**

```python
# ✅ CLEAN, CONSISTENT PATTERN
async def init(self, request):
    return pip.run_all_cells(app_name, steps)

async def handle_revert(self, request):
    return pip.run_all_cells(app_name, steps)
```

**The `run_all_cells()` method:**
- Creates a fresh container with all step placeholders
- Handles the first step loading trigger automatically  
- Provides consistent initialization across all workflows
- Eliminates code duplication and maintenance burden
- Is used in `finalize`, `unfinalize`, and `handle_revert` methods

**When this pattern was cleaned up system-wide:**
- **20+ plugin files** were updated to use `run_all_cells()`
- **Zero functional changes** - all workflows continued working perfectly
- **Massive code reduction** - eliminated hundreds of lines of boilerplate
- **Improved maintainability** - single method to maintain instead of scattered patterns

## 7. Breaking the Chain (Intentional & Cautionary)

The chain should only be broken intentionally:

  * **Input Forms**: A step rendering an input form does not trigger the next step until the form is submitted.
  * **Terminal Responses**: If a step results in a final output (e.g., a file download link) and no further automatic progression is desired. The HTML returned would not include the `Div(id=next_step_id, hx_trigger="load")`.
  * **Polling**: For long-running tasks, a step might return UI that polls a status endpoint. The polling `Div` itself would use `hx_trigger="load, every Xs"` and `hx_target="this"`. Only when polling indicates completion would the response include the trigger for the *next workflow step*.

**Never remove `hx_trigger="load"` from a standard progression path.** Alternative implicit approaches (like event bubbling from a parent) are not used and are considered unreliable for this core pattern.
