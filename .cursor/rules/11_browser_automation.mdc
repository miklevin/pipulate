---
---

## description: Using Selenium for browser automation, including cross-platform ChromeDriver setup and session management. globs: ["pipulate/plugins/*browser*.py", "pipulate/plugins/*selenium*.py", "flake.nix"] alwaysApply: false

# Browser Automation with Selenium

## 1. Overview

Pipulate supports Selenium for automating browser interactions. Workflows can launch and control a Chrome browser.

## 2. Dependencies & Environment (`flake.nix`)

  * `selenium` (Python package)
  * `webdriver-manager` (Python package, primarily for macOS convenience)
  * System packages: `chromedriver` and `chromium` (for Linux, provided by Nix).
  * `EFFECTIVE_OS` env var (set in `flake.nix` `shellHook`): "darwin" or "linux". This helps scripts adapt.

## 3. ChromeDriver Setup

Handled differently based on `EFFECTIVE_OS`:

  * **Linux**: Uses `chromedriver` from the Nix environment path.
    ```python
    from selenium.webdriver.chrome.service import Service as ChromeService
    # On Linux, Service() without arguments typically finds chromedriver in PATH
    service = ChromeService()
    ```
  * **macOS**: `webdriver-manager` is often used to download and manage `chromedriver`.
    ```python
    from selenium.webdriver.chrome.service import Service as ChromeService
    from webdriver_manager.chrome import ChromeDriverManager
    service = ChromeService(ChromeDriverManager().install())
    ```
    The `440_browser_automation.py` plugin demonstrates this conditional setup.

## 4. Chrome Options

Standard options for automation:

```python
from selenium.webdriver.chrome.options import Options
chrome_options = Options()
chrome_options.add_argument("--no-sandbox") # Often needed in containerized/restricted envs
chrome_options.add_argument("--disable-dev-shm-usage") # Overcomes limited resource problems
# chrome_options.add_argument("--headless") # For running without a visible browser window
chrome_options.add_argument("--start-maximized")
# To open a new window instead of a tab (sometimes useful):
# chrome_options.add_argument("--new-window")
```

## 5. WebDriver Initialization

```python
from selenium import webdriver
driver = webdriver.Chrome(service=service, options=chrome_options)
try:
    driver.get("https://example.com")
    # ... perform actions ...
    title = driver.title
finally:
    driver.quit() # CRITICAL: Always quit the driver to free resources.
```

## 6. Session Management & Profiles

  * **Temporary Profiles (Default for Clean Sessions)**: Selenium starts with a new, temporary profile by default.
  * **Persistent Profiles (for Logins, Cookies)**: To reuse a profile (e.g., to stay logged in):
    ```python
    # In workflow __init__ or a helper method
    # self.profile_base_path = Path.home() / ".pipulate_selenium_profiles" / self.APP_NAME
    # self.profile_base_path.mkdir(parents=True, exist_ok=True)

    # In step method, for a specific pipeline_id:
    # profile_name_for_run = f"profile_{pipeline_id.replace('-', '_')}" # Sanitize key
    # user_data_dir = self.profile_base_path / "user_data" # Main dir for all profiles of this type
    # specific_profile_dir_name = profile_name_for_run # Subdirectory for this specific run's profile

    # chrome_options.add_argument(f"--user-data-dir={str(user_data_dir.resolve())}")
    # chrome_options.add_argument(f"--profile-directory={specific_profile_dir_name}")
    ```
    This creates profiles like: `~/.pipulate_selenium_profiles/my_workflow_app/user_data/profile_default-myworkflow-01`
      * Managing these profiles (creation, deletion, selection) needs to be part of the workflow logic.
      * Be mindful of disk space and data privacy with persistent profiles.

## 7. Using `selenium-wire` (Enhanced Request/Response Capture)

If a workflow needs to inspect network requests (e.g., `110_parameter_buster_workflow.py`):

```python
from seleniumwire import webdriver # Note: use seleniumwire.webdriver

# Initialize selenium-wire driver (options can be passed similarly)
driver = webdriver.Chrome(service=service, options=chrome_options, seleniumwire_options={...})
# ... driver.get(url) ...
# Access requests:
# for request in driver.requests:
#     if request.response:
#         print(request.url, request.response.status_code, request.response.headers)
driver.quit()
```

## 8. Asynchronous Considerations

Selenium operations are blocking. If running them within an `async` workflow step:

  * Use `await asyncio.to_thread(driver.get, url)` for long-running Selenium calls to avoid blocking the asyncio event loop.
    ```python
    import asyncio
    # ...
    await asyncio.to_thread(driver.get, url_to_open)
    title = await asyncio.to_thread(lambda: driver.title) # For properties
    ```

## 9. Error Handling & Cleanup

  * Always use `try...finally` to ensure `driver.quit()` is called.
  * Catch specific Selenium exceptions (e.g., `TimeoutException`, `NoSuchElementException`).
