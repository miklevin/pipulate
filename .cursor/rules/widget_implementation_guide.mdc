---
description: 
globs: 
alwaysApply: false
---
# Widget Implementation Guide

## Core Principles
1. Each widget should be self-contained with its own styling
2. Use semantic HTML and consider accessibility
3. Follow the standard widget lifecycle states
4. Maintain consistent LLM context updates

## Widget Lifecycle States
- Input/Configuration
- Preview/Display
- Finalized/Locked
- Error/Invalid

## LLM Context Pattern
Keep the LLM informed using these standard markers:

### 1. Widget Configuration
```python
pip.append_to_history("[WIDGET CONFIG] Configuration details...")
```
- Initial/default configuration
- Configuration changes
- Parameter updates

### 2. Widget State
```python
pip.append_to_history("[WIDGET STATE] Current state...")
```
- Input form display
- Preview mode
- Finalized state
- Error conditions

### 3. Widget Content
```python
pip.append_to_history("[WIDGET CONTENT] Content details...")
```
- Actual displayed content
- Content structure
- Data representation

### 4. Widget Interactions
```python
pip.append_to_history("[WIDGET INTERACTION] Interaction details...")
```
- User submissions
- Data updates
- State transitions

### 5. Widget Validation
```python
pip.append_to_history("[WIDGET VALIDATION] Validation results...")
```
- Validation checks
- Error messages
- Success confirmations

## Implementation Steps
1. Define widget configuration parameters
2. Create input form with validation
3. Implement display/preview mode
4. Add finalized state handling
5. Include error handling
6. Maintain LLM context throughout

## Example Implementation
See [505_designer_workflow.py](mdc:pipulate/plugins/505_designer_workflow.py) for a complete example.

## Widget Recipes
Widget recipes are stored in `/home/mike/repos/pipulate/training/widget_recipes/` and serve as a growing catalog of reusable widget patterns.

## Best Practices
1. Keep styling contained within the widget
2. Use semantic HTML elements
3. Consider accessibility (ARIA labels, keyboard navigation)
4. Provide clear error messages
5. Maintain consistent LLM context updates
6. Document widget behavior and configuration options

## Error Handling
1. Validate all inputs
2. Provide clear error messages
3. Keep LLM informed of validation results
4. Handle edge cases gracefully
5. Maintain widget state during errors

## Testing Checklist
- [ ] Input validation works
- [ ] Preview displays correctly
- [ ] Finalized state is locked
- [ ] Error handling is complete
- [ ] LLM context is maintained
- [ ] Accessibility is considered
- [ ] Styling is self-contained
