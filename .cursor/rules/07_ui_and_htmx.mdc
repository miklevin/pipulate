---
description: 
globs: 
alwaysApply: false
---

## description: Guidelines for building UI components, using HTMX for interactivity (beyond the core chain reaction), and PicoCSS form styling. globs: ["pipulate/plugins/*.py", "server.py", "static/pico.css"] alwaysApply: true


## description: Guidelines for building UI components, using HTMX for interactivity (beyond the core chain reaction), and PicoCSS form styling. globs: ["pipulate/plugins/*.py", "server.py", "static/pico.css"] alwaysApply: true

# UI Patterns, HTMX, and PicoCSS Forms

## 1. Core UI Philosophy

  * **Server-Rendered HTML**: FastHTML generates HTML directly from Python.
  * **HTMX for Dynamics**: Most UI updates are achieved via HTMX making requests and swapping HTML fragments returned by the server. Avoid extensive client-side JavaScript.
  * **PicoCSS**: Provides lightweight, semantic styling. Adhere to its classless or minimal-class approach where possible. Standard HTML form elements are styled automatically.
  * **Accessibility**: Use semantic HTML, ARIA attributes where appropriate, and ensure keyboard navigability.

## 2. Common FastHTML Components in Pipulate

  * `Container`, `Grid`, `Card`, `Article`, `Section`
  * `H1`-`H6`, `P`, `A`, `Button`, `Img`, `Hr`, `Ul`, `Ol`, `Li`, `Details`, `Summary`
  * `Form`, `Input`, `Label`, `Select`, `Option`, `Textarea`, `Fieldset`, `Legend`, `Progress`
  * `Table`, `Thead`, `Tbody`, `Tr`, `Th`, `Td`, `Caption`
  * `Script`, `Link`, `Meta`, `Title`

## 3. Standard Page & Workflow Layout (Simplified)

```python
# server.py: home() method defines overall structure
Main( # Main container with theme, width, padding
    Container( # Outer container for nav + content grid
        create_nav_group(), # Navigation bar (Profile, App, Env dropdowns, Breadcrumb)
        Grid( # Main content area (left: workflow UI, right: chat)
            create_grid_left(menux), # Dynamically loads workflow UI
            create_chat_interface(),
            # style="grid-template-columns: 65% 35%;"
        ),
        create_poke_button() # Floating action button
    )
)
```

  * Workflows primarily render content for the `create_grid_left` area, often targeting a specific `Div` (e.g., `#workflow_app_name-container`) for their main UI.

## 4. PicoCSS Forms

PicoCSS styles standard HTML form elements with minimal extra classes.

  * **Labels and Inputs**:
    ```python
    Label("Your Name", **{'for': 'name_id'}),
    Input(type="text", id="name_id", name="user_name", placeholder="Enter your name", required=True)
    Small("Helper text for the input.") # Optional
    ```
  * **Buttons**:
      * Primary: `Button("Submit", type="submit", cls="primary")`
      * Secondary: `Button("Cancel", type="button", cls="secondary")`
      * Contrast/Outline: `Button("Details", type="button", cls="contrast outline")`
  * **Select Dropdowns**:
    ```python
    Select(
        Option("Choose...", value="", disabled=True, selected=True),
        *[Option(o_val, value=o_key) for o_key, o_val in options.items()],
        name="my_selection"
    )
    ```
  * **Checkboxes & Radio Buttons**: Group with `Fieldset` and `Legend`. Use `Label` around `Input`.
    ```python
    Label(Input(type="checkbox", name="agree"), " I agree to terms")
    ```
  * **Switches (PicoCSS specific)**:
    ```python
    Label(Input(type="checkbox", name="toggle", role="switch"), " Enable Feature")
    ```
  * **File Inputs**:
    ```python
    Input(type="file", name="upload_file", cls="contrast") # `cls="contrast"` is a common styling choice
    # Ensure form has enctype="multipart/form-data"
    ```
  * **Validation**: Use `aria-invalid="true"` or `aria-invalid="false"` on inputs for PicoCSS styling.
    ```python
    Input(type="email", name="user_email", aria_invalid="true" if error else "false")
    P(error_message, style="color: var(--pico-form-element-invalid-active-border-color);") if error else P()
    ```

## 5. HTMX Usage (Beyond Chain Reaction)

  * **Targeted Updates**:
    ```python
    Button("Refresh Section", hx_get="/get_updated_data", hx_target="#data-section", hx_swap="innerHTML")
    Div(id="data-section", "Initial content")
    ```
  * **Out-of-Band Swaps**: Update multiple parts of the page from one response.
    ```python
    # Server returns:
    # <div id="main-content">Updated main.</div>
    # <div id="notification-area" hx-swap-oob="true">New notification!</div>
    ```
  * **Event Triggers**: Trigger requests on events other than click/submit.
    ```python
    Input(type="text", name="search", hx_get="/search_results", hx_trigger="keyup changed delay:500ms", hx_target="#results")
    ```
  * **Passing Parameters**:
    ```python
    Button("Delete Item", hx_delete="/items/123", hx_confirm="Are you sure?")
    # With hx-vals
    Button("Action", hx_post="/do_action", hx_vals='js:{"itemId": currentItem.id, "context": "profilePage"}')
    ```
  * **Loading States**: PicoCSS integrates with HTMX `htmx-request` class for spinners.
    `<button class="htmx-request:not([aria-busy=true])">Submit</button>` (Pico specific styling for busy)
    Or, more generically:
    `<div hx_indicator="#loading-spinner">Content that loads</div> <img id="loading-spinner" class="htmx-indicator" src="/spinner.gif">`

## 6. UI Consistency Helpers in `Pipulate` Class (`server.py`)

  * `pipulate.display_revert_header(...)`: Standard UI for showing a completed step's value with a "Revert" button.
  * `pipulate.display_widget_container(...)`: Wraps a widget's content with a revert header message.
  * `pipulate.finalized_content(...)`: Displays content for a finalized (locked) step.
  * `pipulate.wrap_with_inline_button(...)`: Styles an input field with an adjacent submit button (e.g., for pipeline key input).
  * `pipulate.get_style("error" | "success" | "muted")`: Provides consistent CSS for messages.

## 7. Dynamic Datalists

The `pipulate.update_datalist(datalist_id, options=None, clear=False)` helper is used with HTMX OOB swaps to dynamically update `<datalist>` options, often for the pipeline ID input.

## 8. Opening Local OS Folders

Pipulate provides a built-in endpoint for opening local OS folders in the host system's file explorer:

```python
# Example HTMX link to open a folder
A("Open Downloads Folder", 
   href="/open-folder?path=" + urllib.parse.quote(str(Path("downloads").absolute())),
   hx_get="/open-folder?path=" + urllib.parse.quote(str(Path("downloads").absolute())),
   hx_swap="none"  # Important: prevents UI updates since we just want to open the folder
)
```

Key points:
- Uses the `/open-folder` endpoint with a `path` query parameter
- Path must be absolute and URL-encoded
- Uses `hx_swap="none"` to prevent UI updates
- Works cross-platform (Windows, macOS, Linux)
- Includes security checks for path validation
- Returns appropriate error messages for invalid paths or OS-specific issues

Common use cases:
- Opening download directories
- Viewing generated files
- Accessing workflow output folders
- Quick access to project directories

The endpoint handles OS-specific commands:
- Windows: `explorer`
- macOS: `open`
- Linux: `xdg-open`
