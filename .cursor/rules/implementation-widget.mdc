---
description: 
globs: 
alwaysApply: false
---
# Widget Implementation Patterns

## Core Requirements

### Chain Reaction Pattern
All widgets MUST preserve the chain reaction pattern:
```python
Div(
    Card(...), # Current step's content
    # CRITICAL: This inner Div triggers loading of the next step
    # DO NOT REMOVE OR MODIFY these attributes:
    Div(id=next_step_id, hx_get=f"/{app_name}/{next_step_id}", hx_trigger="load"),
    id=step_id
)
```

### State Management
- Use `pip.update_step_state()` for state updates
- Access state via `step_data.get(step.done)`
- Use `_preserve_completed` flag for download steps
- Handle state during reverts properly

### Error Handling
- Validate all inputs before processing
- Use proper HTTP status codes
- Provide clear error messages
- Include error recovery mechanisms
- Handle API and file operation errors

### Accessibility
- Include ARIA labels and roles
- Support keyboard navigation
- Ensure screen reader compatibility
- Manage focus properly
- Maintain color contrast

### Mobile Responsiveness
- Use minimum touch target sizes (44px)
- Handle keyboard appearance
- Consider screen size constraints
- Use responsive layouts
- Test on various devices

## Implementation Phases

### 1. Step Definition
```python
Step(
    id='step_XX',
    done='field_name',     # State storage field
    show='Widget Name',    # User-friendly name
    refill=True,           # Allow refilling if needed
    transform=lambda x: x  # Optional transform
)
```

### 2. GET Handler
```python
# Value access
value = step_data.get(step.done, "")

# Display finalized state
if "finalized" in finalize_data:
    return Div(
        Card(...),
        Div(id=next_step_id, hx_get=f"/{app_name}/{next_step_id}", hx_trigger="load"),
        id=step_id
    )

# Complete state
return Div(
    pip.revert_control(...),
    Div(id=next_step_id, hx_get=f"/{app_name}/{next_step_id}", hx_trigger="load"),
    id=step_id
)

# Input form
return Div(
    Card(
        Form(...)
    ),
    Div(id=next_step_id),
    id=step_id
)
```

### 3. SUBMIT Handler
```python
# Form processing
form = await request.form()
value = form.get(step.done)

# Validation
if not value:
    return P("Error: Required field", style=pip.get_style("error"))

# State storage
await pip.update_step_state(pipeline_id, step_id, value, steps)

# Return with chain reaction
return Div(
    pip.revert_control(...),
    Div(id=next_step_id, hx_get=f"/{app_name}/{next_step_id}", hx_trigger="load"),
    id=step_id
)
```

## Common Pitfalls
1. Removing chain reaction div
2. Missing error handling
3. Inadequate mobile support
4. Poor accessibility
5. Incorrect state management
6. Missing validation
7. Poor error messages
8. Incomplete keyboard support

## Related Rules
- [Workflow Implementation](mdc:workflow-implementation.mdc)
- [Chain Reaction Pattern](mdc:workflow-chain-reaction.mdc)
- [State Management](mdc:state-management.mdc)
