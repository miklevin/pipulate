---
description: 
globs: 
alwaysApply: false
---
# Plugin Identity Pattern

## Overview
Pipulate plugins maintain a strict separation between public identity (filename) and internal identity (APP_NAME) to enable flexible reorganization without breaking data relationships. This pattern ensures data integrity while allowing for UI and organizational flexibility.

## Core Pattern
```python
# Filename: 035_url_opener.py
class MyWorkflow:
    APP_NAME = "open_url"          # Internal identity - MUST differ from filename
    DISPLAY_NAME = "URL Opener"    # User-friendly name
```

## Identity Components

### 1. External Identity (User-facing)
- Controlled by `DISPLAY_NAME` in the workflow class
- Can be freely changed without affecting data integrity
- Appears in the UI dropdown menu
- Example: `DISPLAY_NAME = "Widget Designer"`
- Use spaces for readability (e.g., "Widget Designer")

### 2. Internal Identity (System-facing)
- Controlled by `APP_NAME` in the workflow class
- Must remain stable to maintain database integrity
- Used for routes and data storage
- Example: `APP_NAME = "design_widget"`
- Use underscores for consistency (e.g., `design_widget`)

### 3. Filename Identity (Public)
- Controls menu position via numeric prefix (e.g., `035_`)
- Defines public endpoint URLs
- Safe to change for reorganization
- Example progression: `xx_url_opener.py` → `035_url_opener.py` → `020_url_opener.py`

## Development States

### 1. Development State
```python
# Filename: xx_my_plugin.py
APP_NAME = "my_internal_name"    # Set permanent internal identity
DISPLAY_NAME = "My Plugin"       # User-friendly name
```
- `xx_` prefix prevents auto-loading
- Safe to experiment with configuration

### 2. Deployment State
```python
# Filename: 035_my_plugin.py
APP_NAME = "my_internal_name"    # Remains unchanged
DISPLAY_NAME = "My Plugin"       # Can be updated
```
- Number prefix sets menu position
- Filename creates public endpoints

### 3. Reorganization State
```python
# Filename: 020_my_plugin.py     # Only filename changes
APP_NAME = "my_internal_name"    # Stays constant
DISPLAY_NAME = "My Plugin"       # Can be updated
```
- Can safely rename for menu reordering
- Internal relationships preserved

## Best Practices

### 1. File Organization
- Use numeric prefixes to control workflow order in dropdown
- Higher numbers (e.g., 700+) for experimental/development workflows
- Lower numbers (e.g., 100-500) for production workflows
- Example progression:
  ```
  010_tasks.py           # Core functionality
  020_hello_workflow.py  # Basic examples
  030_connect_*.py      # Connection plugins
  500_blank_*.py        # Templates
  520_widget_*.py       # Widget examples
  700_*_designer.py     # Development workflows
  ```

### 2. Identity Management
- Keep `APP_NAME` short and descriptive
- Use underscores for `APP_NAME` (e.g., `design_widget`)
- Use spaces for `DISPLAY_NAME` (e.g., "Widget Designer")
- Never change `APP_NAME` after workflow is in use
- Comment the `APP_NAME` line to explain its purpose
- Document any identity-related decisions in workflow docstring
- Keep track of used `APP_NAME`s to avoid duplicates

### 3. Naming Collision Prevention
- Never use the same name for both `APP_NAME` and `DISPLAY_NAME`
- Keep `APP_NAME` distinct from the filename
- Example:
  ```python
  # Good
  APP_NAME = "design_widget"        # Internal routes/data
  DISPLAY_NAME = "Widget Designer"  # UI display
  
  # Bad - causes collisions
  APP_NAME = "widget_designer"      # Too similar to filename
  DISPLAY_NAME = "Widget Designer"  # Same as APP_NAME
  ```

## Common Pitfalls

### 1. Identity Collision
- Using same name for both internal and external identity
- Results in UI navigation issues and potential data corruption

### 2. Filename Collision
- Using similar names in filename and `APP_NAME`
- Can cause confusion and maintenance issues

### 3. Changing Internal Identity
- Modifying `APP_NAME` after workflow is in use
- Breaks database associations and data integrity

### 4. Error Prevention
- Navigation disappears if APP_NAME matches filename
- Database corruption if APP_NAME changes after deployment
- Plugin conflicts if APP_NAME duplicated
- UI issues if DISPLAY_NAME matches APP_NAME

## Reference Examples
See [500_blank_workflow.py](mdc:pipulate/plugins/500_blank_workflow.py) for template pattern.
See [510_splice_workflow.py](mdc:pipulate/plugins/510_splice_workflow.py) for implementation examples.
See [700_widget_designer.py](mdc:pipulate/plugins/700_widget_designer.py) for development workflow example.
