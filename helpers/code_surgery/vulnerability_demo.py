#!/usr/bin/env python3
"""
Vulnerability Detection Demo - Showing the exact order dependencies you identified
"""

import re
from ast_analyzer import ASTAnalyzer

def find_global_function_dependencies(file_path):
    """Find the exact pattern: logger = setup_logging()"""
    analyzer = ASTAnalyzer()
    analysis = analyzer.analyze_file(file_path)
    
    dependencies = []
    
    for block in analysis.blocks:
        if block.block_type == 'assignment':
            # Look for pattern: variable = function_name()
            pattern = r'(\w+)\s*=\s*(\w+)\s*\('
            matches = re.findall(pattern, block.source_code)
            
            for var_name, func_name in matches:
                # Find the function definition
                for other_block in analysis.blocks:
                    if (other_block.block_type == 'function' and 
                        other_block.name == func_name and
                        other_block.start_line < block.start_line):
                        
                        dependencies.append({
                            'variable': var_name,
                            'function': func_name,
                            'assignment_line': block.start_line,
                            'function_line': other_block.start_line,
                            'distance': block.start_line - other_block.start_line
                        })
                        break
    
    return dependencies

def find_standalone_imports(file_path):
    """Find imports that sit between functions"""
    analyzer = ASTAnalyzer()
    analysis = analyzer.analyze_file(file_path)
    
    with open(file_path, 'r') as f:
        source_lines = f.readlines()
    
    standalone_imports = []
    
    for i, line in enumerate(source_lines, 1):
        if line.strip().startswith(('from ', 'import ')):
            # Check if this line is between blocks
            prev_block = None
            next_block = None
            
            for block in analysis.blocks:
                if block.end_line < i:
                    prev_block = block
                elif block.start_line > i and next_block is None:
                    next_block = block
                    break
            
            if prev_block and next_block:
                standalone_imports.append({
                    'line': i,
                    'content': line.strip(),
                    'prev_block': prev_block.name,
                    'next_block': next_block.name
                })
    
    return standalone_imports

def main():
    print("üö® EXACT VULNERABILITY DETECTION")
    print("=" * 50)
    print("Finding the order dependencies you identified...\n")
    
    # Find global function dependencies
    deps = find_global_function_dependencies('server.py')
    print(f"üî• GLOBAL ‚Üí FUNCTION DEPENDENCIES: {len(deps)}")
    for dep in deps:
        print(f"   Line {dep['assignment_line']}: {dep['variable']} = {dep['function']}()")
        print(f"   Function defined {dep['distance']} lines earlier")
        print(f"   üí• DISASTER: Moving {dep['function']}() breaks {dep['variable']} assignment\n")
    
    # Find standalone imports
    imports = find_standalone_imports('server.py')
    print(f"üìÑ STANDALONE IMPORTS: {len(imports)}")
    for imp in imports[:3]:  # Show first 3
        print(f"   Line {imp['line']}: {imp['content'][:50]}...")
        print(f"   Between: {imp['prev_block']} ‚Üí {imp['next_block']}")
        print(f"   üí• DISASTER: Import could disappear during refactoring\n")
    
    print("üõ°Ô∏è  ENHANCED SYSTEM PREVENTS THESE DISASTERS!")
    print("   ‚úÖ Detects global ‚Üí function dependencies")
    print("   ‚úÖ Preserves standalone imports/comments")
    print("   ‚úÖ Conservative approach: Keep dependencies together")

if __name__ == "__main__":
    main()
